// This file is auto-generated by @hey-api/openapi-ts
import { queryOptions, infiniteQueryOptions } from '@tanstack/react-query';
import { client, getCheckApiKey, postForceSync, postPassthroughToolApi, deleteIntegrationsIntegrationId, getIntegrationsIntegrationId, postIntegrationsIntegrationIdRelink, getIntegrationsIntegrationIdIntegrationFields, patchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldId, getIntegrationsIntegrationIdCustomFields, putIntegrationsIntegrationIdCustomFieldsCustomFieldId, getToolsCategory, postHrisProvisioningGroupsGroupIdDiff, postHrisProvisioningGroupsGroupIdSetupLinks, getHrisEmployees, postHrisEmployees, patchHrisEmployeesEmployeeId, postHrisEmployeesEmployeeIdDocuments, patchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldId, getHrisEmployeeDocumentCategories, getHrisTeams, getHrisGroups, getHrisEmployments, getHrisLocations, getHrisAbsenceTypes, getHrisTimeOffBalances, getHrisAbsences, postHrisAbsences, deleteHrisAbsencesAbsenceId, getHrisLegalEntities, getHrisAttendance, getHrisTimesheets, getAtsApplications, putAtsApplicationsApplicationIdStage, postAtsApplicationsApplicationIdResultLinks, postAtsApplicationsApplicationIdNotes, getAtsApplicationsApplicationIdAttachments, postAtsApplicationsApplicationIdAttachments, postAtsApplicationsApplicationIdReject, getAtsCandidates, postAtsCandidates, patchAtsCandidatesCandidateId, getAtsCandidatesCandidateIdAttachments, postAtsCandidatesCandidateIdAttachments, postAtsCandidatesCandidateIdResultLinks, deleteAtsCandidatesCandidateIdTags, postAtsCandidatesCandidateIdTags, patchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldId, getAtsTags, getAtsApplicationStages, getAtsJobs, postAtsJobsJobIdApplications, getAtsUsers, getAtsOffers, getAtsRejectionReasons, getAssessmentPackages, putAssessmentPackages, getAssessmentOrdersOpen, putAssessmentOrdersAssessmentOrderIdResult, postConnectCreateLink, getConnectIntegrationByTokenToken, postConnectActivateIntegration, getCustomDatevSystemInformation, postCustomDatevPassthrough, getCustomDatevCheckEauPermission, getCustomDatevEauRequestsEauId, getCustomDatevCheckDocumentPermission, getCustomDatevAvailableDocuments, postCustomDatevDownloadDocument, postCustomDatevEmployeesEmployeeIdDownloadDocument, postCustomDatevEmployeesEmployeeIdEauRequests, putCustomDatevEmployeesEmployeeIdPreparePayroll, putCustomDatevEmployeesEmployeeIdCompensations, getCustomDatevCheckWritePermission, getCustomDatevDataPushes, postCustomDatevPushDataGeneral, postCustomDatevPushDataPayroll, postCustomSilaeEmployeesEmployeeIdPayrollSupplements } from '../sdk.gen';
const createQueryKey = (id, options, infinite) => {
    const params = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl };
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};
export const getCheckApiKeyQueryKey = (options) => [createQueryKey('getCheckApiKey', options)];
export const getCheckApiKeyOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCheckApiKey({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCheckApiKeyQueryKey(options)
    });
};
export const postForceSyncQueryKey = (options) => [createQueryKey('postForceSync', options)];
export const postForceSyncOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postForceSync({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postForceSyncQueryKey(options)
    });
};
export const postForceSyncMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postForceSync({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postPassthroughToolApiQueryKey = (options) => [createQueryKey('postPassthroughToolApi', options)];
export const postPassthroughToolApiOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPassthroughToolApi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPassthroughToolApiQueryKey(options)
    });
};
export const postPassthroughToolApiMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postPassthroughToolApi({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const deleteIntegrationsIntegrationIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteIntegrationsIntegrationId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getIntegrationsIntegrationIdQueryKey = (options) => [createQueryKey('getIntegrationsIntegrationId', options)];
export const getIntegrationsIntegrationIdOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIntegrationsIntegrationId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIntegrationsIntegrationIdQueryKey(options)
    });
};
export const postIntegrationsIntegrationIdRelinkQueryKey = (options) => [createQueryKey('postIntegrationsIntegrationIdRelink', options)];
export const postIntegrationsIntegrationIdRelinkOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postIntegrationsIntegrationIdRelink({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postIntegrationsIntegrationIdRelinkQueryKey(options)
    });
};
export const postIntegrationsIntegrationIdRelinkMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postIntegrationsIntegrationIdRelink({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getIntegrationsIntegrationIdIntegrationFieldsQueryKey = (options) => [createQueryKey('getIntegrationsIntegrationIdIntegrationFields', options)];
export const getIntegrationsIntegrationIdIntegrationFieldsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIntegrationsIntegrationIdIntegrationFields({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIntegrationsIntegrationIdIntegrationFieldsQueryKey(options)
    });
};
const createInfiniteParams = (queryKey, page) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body,
            ...page.body
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path,
            ...page.path
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query,
            ...page.query
        };
    }
    return params;
};
export const getIntegrationsIntegrationIdIntegrationFieldsInfiniteQueryKey = (options) => [createQueryKey('getIntegrationsIntegrationIdIntegrationFields', options, true)];
export const getIntegrationsIntegrationIdIntegrationFieldsInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getIntegrationsIntegrationIdIntegrationFields({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIntegrationsIntegrationIdIntegrationFieldsInfiniteQueryKey(options)
    });
};
export const patchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await patchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getIntegrationsIntegrationIdCustomFieldsQueryKey = (options) => [createQueryKey('getIntegrationsIntegrationIdCustomFields', options)];
export const getIntegrationsIntegrationIdCustomFieldsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIntegrationsIntegrationIdCustomFields({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIntegrationsIntegrationIdCustomFieldsQueryKey(options)
    });
};
export const getIntegrationsIntegrationIdCustomFieldsInfiniteQueryKey = (options) => [createQueryKey('getIntegrationsIntegrationIdCustomFields', options, true)];
export const getIntegrationsIntegrationIdCustomFieldsInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getIntegrationsIntegrationIdCustomFields({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIntegrationsIntegrationIdCustomFieldsInfiniteQueryKey(options)
    });
};
export const putIntegrationsIntegrationIdCustomFieldsCustomFieldIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await putIntegrationsIntegrationIdCustomFieldsCustomFieldId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getToolsCategoryQueryKey = (options) => [createQueryKey('getToolsCategory', options)];
export const getToolsCategoryOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getToolsCategory({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getToolsCategoryQueryKey(options)
    });
};
export const postHrisProvisioningGroupsGroupIdDiffQueryKey = (options) => [createQueryKey('postHrisProvisioningGroupsGroupIdDiff', options)];
export const postHrisProvisioningGroupsGroupIdDiffOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postHrisProvisioningGroupsGroupIdDiff({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postHrisProvisioningGroupsGroupIdDiffQueryKey(options)
    });
};
export const postHrisProvisioningGroupsGroupIdDiffMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postHrisProvisioningGroupsGroupIdDiff({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postHrisProvisioningGroupsGroupIdSetupLinksQueryKey = (options) => [createQueryKey('postHrisProvisioningGroupsGroupIdSetupLinks', options)];
export const postHrisProvisioningGroupsGroupIdSetupLinksOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postHrisProvisioningGroupsGroupIdSetupLinks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postHrisProvisioningGroupsGroupIdSetupLinksQueryKey(options)
    });
};
export const postHrisProvisioningGroupsGroupIdSetupLinksMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postHrisProvisioningGroupsGroupIdSetupLinks({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getHrisEmployeesQueryKey = (options) => [createQueryKey('getHrisEmployees', options)];
export const getHrisEmployeesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisEmployees({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisEmployeesQueryKey(options)
    });
};
export const getHrisEmployeesInfiniteQueryKey = (options) => [createQueryKey('getHrisEmployees', options, true)];
export const getHrisEmployeesInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getHrisEmployees({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisEmployeesInfiniteQueryKey(options)
    });
};
export const postHrisEmployeesQueryKey = (options) => [createQueryKey('postHrisEmployees', options)];
export const postHrisEmployeesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postHrisEmployees({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postHrisEmployeesQueryKey(options)
    });
};
export const postHrisEmployeesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postHrisEmployees({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const patchHrisEmployeesEmployeeIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await patchHrisEmployeesEmployeeId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postHrisEmployeesEmployeeIdDocumentsQueryKey = (options) => [createQueryKey('postHrisEmployeesEmployeeIdDocuments', options)];
export const postHrisEmployeesEmployeeIdDocumentsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postHrisEmployeesEmployeeIdDocuments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postHrisEmployeesEmployeeIdDocumentsQueryKey(options)
    });
};
export const postHrisEmployeesEmployeeIdDocumentsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postHrisEmployeesEmployeeIdDocuments({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const patchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await patchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getHrisEmployeeDocumentCategoriesQueryKey = (options) => [createQueryKey('getHrisEmployeeDocumentCategories', options)];
export const getHrisEmployeeDocumentCategoriesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisEmployeeDocumentCategories({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisEmployeeDocumentCategoriesQueryKey(options)
    });
};
export const getHrisEmployeeDocumentCategoriesInfiniteQueryKey = (options) => [createQueryKey('getHrisEmployeeDocumentCategories', options, true)];
export const getHrisEmployeeDocumentCategoriesInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getHrisEmployeeDocumentCategories({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisEmployeeDocumentCategoriesInfiniteQueryKey(options)
    });
};
export const getHrisTeamsQueryKey = (options) => [createQueryKey('getHrisTeams', options)];
export const getHrisTeamsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisTeams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisTeamsQueryKey(options)
    });
};
export const getHrisTeamsInfiniteQueryKey = (options) => [createQueryKey('getHrisTeams', options, true)];
export const getHrisTeamsInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getHrisTeams({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisTeamsInfiniteQueryKey(options)
    });
};
export const getHrisGroupsQueryKey = (options) => [createQueryKey('getHrisGroups', options)];
export const getHrisGroupsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisGroups({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisGroupsQueryKey(options)
    });
};
export const getHrisGroupsInfiniteQueryKey = (options) => [createQueryKey('getHrisGroups', options, true)];
export const getHrisGroupsInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getHrisGroups({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisGroupsInfiniteQueryKey(options)
    });
};
export const getHrisEmploymentsQueryKey = (options) => [createQueryKey('getHrisEmployments', options)];
export const getHrisEmploymentsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisEmployments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisEmploymentsQueryKey(options)
    });
};
export const getHrisEmploymentsInfiniteQueryKey = (options) => [createQueryKey('getHrisEmployments', options, true)];
export const getHrisEmploymentsInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getHrisEmployments({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisEmploymentsInfiniteQueryKey(options)
    });
};
export const getHrisLocationsQueryKey = (options) => [createQueryKey('getHrisLocations', options)];
export const getHrisLocationsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisLocations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisLocationsQueryKey(options)
    });
};
export const getHrisLocationsInfiniteQueryKey = (options) => [createQueryKey('getHrisLocations', options, true)];
export const getHrisLocationsInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getHrisLocations({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisLocationsInfiniteQueryKey(options)
    });
};
export const getHrisAbsenceTypesQueryKey = (options) => [createQueryKey('getHrisAbsenceTypes', options)];
export const getHrisAbsenceTypesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisAbsenceTypes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisAbsenceTypesQueryKey(options)
    });
};
export const getHrisAbsenceTypesInfiniteQueryKey = (options) => [createQueryKey('getHrisAbsenceTypes', options, true)];
export const getHrisAbsenceTypesInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getHrisAbsenceTypes({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisAbsenceTypesInfiniteQueryKey(options)
    });
};
export const getHrisTimeOffBalancesQueryKey = (options) => [createQueryKey('getHrisTimeOffBalances', options)];
export const getHrisTimeOffBalancesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisTimeOffBalances({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisTimeOffBalancesQueryKey(options)
    });
};
export const getHrisTimeOffBalancesInfiniteQueryKey = (options) => [createQueryKey('getHrisTimeOffBalances', options, true)];
export const getHrisTimeOffBalancesInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getHrisTimeOffBalances({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisTimeOffBalancesInfiniteQueryKey(options)
    });
};
export const getHrisAbsencesQueryKey = (options) => [createQueryKey('getHrisAbsences', options)];
export const getHrisAbsencesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisAbsences({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisAbsencesQueryKey(options)
    });
};
export const getHrisAbsencesInfiniteQueryKey = (options) => [createQueryKey('getHrisAbsences', options, true)];
export const getHrisAbsencesInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getHrisAbsences({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisAbsencesInfiniteQueryKey(options)
    });
};
export const postHrisAbsencesQueryKey = (options) => [createQueryKey('postHrisAbsences', options)];
export const postHrisAbsencesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postHrisAbsences({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postHrisAbsencesQueryKey(options)
    });
};
export const postHrisAbsencesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postHrisAbsences({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const deleteHrisAbsencesAbsenceIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteHrisAbsencesAbsenceId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getHrisLegalEntitiesQueryKey = (options) => [createQueryKey('getHrisLegalEntities', options)];
export const getHrisLegalEntitiesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisLegalEntities({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisLegalEntitiesQueryKey(options)
    });
};
export const getHrisLegalEntitiesInfiniteQueryKey = (options) => [createQueryKey('getHrisLegalEntities', options, true)];
export const getHrisLegalEntitiesInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getHrisLegalEntities({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisLegalEntitiesInfiniteQueryKey(options)
    });
};
export const getHrisAttendanceQueryKey = (options) => [createQueryKey('getHrisAttendance', options)];
export const getHrisAttendanceOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisAttendance({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisAttendanceQueryKey(options)
    });
};
export const getHrisTimesheetsQueryKey = (options) => [createQueryKey('getHrisTimesheets', options)];
export const getHrisTimesheetsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getHrisTimesheets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getHrisTimesheetsQueryKey(options)
    });
};
export const getAtsApplicationsQueryKey = (options) => [createQueryKey('getAtsApplications', options)];
export const getAtsApplicationsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAtsApplications({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsApplicationsQueryKey(options)
    });
};
export const getAtsApplicationsInfiniteQueryKey = (options) => [createQueryKey('getAtsApplications', options, true)];
export const getAtsApplicationsInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAtsApplications({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsApplicationsInfiniteQueryKey(options)
    });
};
export const putAtsApplicationsApplicationIdStageMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await putAtsApplicationsApplicationIdStage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postAtsApplicationsApplicationIdResultLinksQueryKey = (options) => [createQueryKey('postAtsApplicationsApplicationIdResultLinks', options)];
export const postAtsApplicationsApplicationIdResultLinksOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAtsApplicationsApplicationIdResultLinks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAtsApplicationsApplicationIdResultLinksQueryKey(options)
    });
};
export const postAtsApplicationsApplicationIdResultLinksMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postAtsApplicationsApplicationIdResultLinks({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postAtsApplicationsApplicationIdNotesQueryKey = (options) => [createQueryKey('postAtsApplicationsApplicationIdNotes', options)];
export const postAtsApplicationsApplicationIdNotesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAtsApplicationsApplicationIdNotes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAtsApplicationsApplicationIdNotesQueryKey(options)
    });
};
export const postAtsApplicationsApplicationIdNotesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postAtsApplicationsApplicationIdNotes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getAtsApplicationsApplicationIdAttachmentsQueryKey = (options) => [createQueryKey('getAtsApplicationsApplicationIdAttachments', options)];
export const getAtsApplicationsApplicationIdAttachmentsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAtsApplicationsApplicationIdAttachments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsApplicationsApplicationIdAttachmentsQueryKey(options)
    });
};
export const postAtsApplicationsApplicationIdAttachmentsQueryKey = (options) => [createQueryKey('postAtsApplicationsApplicationIdAttachments', options)];
export const postAtsApplicationsApplicationIdAttachmentsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAtsApplicationsApplicationIdAttachments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAtsApplicationsApplicationIdAttachmentsQueryKey(options)
    });
};
export const postAtsApplicationsApplicationIdAttachmentsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postAtsApplicationsApplicationIdAttachments({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postAtsApplicationsApplicationIdRejectQueryKey = (options) => [createQueryKey('postAtsApplicationsApplicationIdReject', options)];
export const postAtsApplicationsApplicationIdRejectOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAtsApplicationsApplicationIdReject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAtsApplicationsApplicationIdRejectQueryKey(options)
    });
};
export const postAtsApplicationsApplicationIdRejectMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postAtsApplicationsApplicationIdReject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getAtsCandidatesQueryKey = (options) => [createQueryKey('getAtsCandidates', options)];
export const getAtsCandidatesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAtsCandidates({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsCandidatesQueryKey(options)
    });
};
export const getAtsCandidatesInfiniteQueryKey = (options) => [createQueryKey('getAtsCandidates', options, true)];
export const getAtsCandidatesInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAtsCandidates({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsCandidatesInfiniteQueryKey(options)
    });
};
export const postAtsCandidatesQueryKey = (options) => [createQueryKey('postAtsCandidates', options)];
export const postAtsCandidatesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAtsCandidates({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAtsCandidatesQueryKey(options)
    });
};
export const postAtsCandidatesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postAtsCandidates({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const patchAtsCandidatesCandidateIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await patchAtsCandidatesCandidateId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getAtsCandidatesCandidateIdAttachmentsQueryKey = (options) => [createQueryKey('getAtsCandidatesCandidateIdAttachments', options)];
export const getAtsCandidatesCandidateIdAttachmentsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAtsCandidatesCandidateIdAttachments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsCandidatesCandidateIdAttachmentsQueryKey(options)
    });
};
export const postAtsCandidatesCandidateIdAttachmentsQueryKey = (options) => [createQueryKey('postAtsCandidatesCandidateIdAttachments', options)];
export const postAtsCandidatesCandidateIdAttachmentsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAtsCandidatesCandidateIdAttachments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAtsCandidatesCandidateIdAttachmentsQueryKey(options)
    });
};
export const postAtsCandidatesCandidateIdAttachmentsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postAtsCandidatesCandidateIdAttachments({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postAtsCandidatesCandidateIdResultLinksQueryKey = (options) => [createQueryKey('postAtsCandidatesCandidateIdResultLinks', options)];
export const postAtsCandidatesCandidateIdResultLinksOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAtsCandidatesCandidateIdResultLinks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAtsCandidatesCandidateIdResultLinksQueryKey(options)
    });
};
export const postAtsCandidatesCandidateIdResultLinksMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postAtsCandidatesCandidateIdResultLinks({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const deleteAtsCandidatesCandidateIdTagsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteAtsCandidatesCandidateIdTags({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postAtsCandidatesCandidateIdTagsQueryKey = (options) => [createQueryKey('postAtsCandidatesCandidateIdTags', options)];
export const postAtsCandidatesCandidateIdTagsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAtsCandidatesCandidateIdTags({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAtsCandidatesCandidateIdTagsQueryKey(options)
    });
};
export const postAtsCandidatesCandidateIdTagsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postAtsCandidatesCandidateIdTags({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const patchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldIdMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await patchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getAtsTagsQueryKey = (options) => [createQueryKey('getAtsTags', options)];
export const getAtsTagsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAtsTags({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsTagsQueryKey(options)
    });
};
export const getAtsTagsInfiniteQueryKey = (options) => [createQueryKey('getAtsTags', options, true)];
export const getAtsTagsInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAtsTags({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsTagsInfiniteQueryKey(options)
    });
};
export const getAtsApplicationStagesQueryKey = (options) => [createQueryKey('getAtsApplicationStages', options)];
export const getAtsApplicationStagesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAtsApplicationStages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsApplicationStagesQueryKey(options)
    });
};
export const getAtsApplicationStagesInfiniteQueryKey = (options) => [createQueryKey('getAtsApplicationStages', options, true)];
export const getAtsApplicationStagesInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAtsApplicationStages({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsApplicationStagesInfiniteQueryKey(options)
    });
};
export const getAtsJobsQueryKey = (options) => [createQueryKey('getAtsJobs', options)];
export const getAtsJobsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAtsJobs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsJobsQueryKey(options)
    });
};
export const getAtsJobsInfiniteQueryKey = (options) => [createQueryKey('getAtsJobs', options, true)];
export const getAtsJobsInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAtsJobs({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsJobsInfiniteQueryKey(options)
    });
};
export const postAtsJobsJobIdApplicationsQueryKey = (options) => [createQueryKey('postAtsJobsJobIdApplications', options)];
export const postAtsJobsJobIdApplicationsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAtsJobsJobIdApplications({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAtsJobsJobIdApplicationsQueryKey(options)
    });
};
export const postAtsJobsJobIdApplicationsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postAtsJobsJobIdApplications({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getAtsUsersQueryKey = (options) => [createQueryKey('getAtsUsers', options)];
export const getAtsUsersOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAtsUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsUsersQueryKey(options)
    });
};
export const getAtsUsersInfiniteQueryKey = (options) => [createQueryKey('getAtsUsers', options, true)];
export const getAtsUsersInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAtsUsers({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsUsersInfiniteQueryKey(options)
    });
};
export const getAtsOffersQueryKey = (options) => [createQueryKey('getAtsOffers', options)];
export const getAtsOffersOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAtsOffers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsOffersQueryKey(options)
    });
};
export const getAtsOffersInfiniteQueryKey = (options) => [createQueryKey('getAtsOffers', options, true)];
export const getAtsOffersInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAtsOffers({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsOffersInfiniteQueryKey(options)
    });
};
export const getAtsRejectionReasonsQueryKey = (options) => [createQueryKey('getAtsRejectionReasons', options)];
export const getAtsRejectionReasonsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAtsRejectionReasons({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsRejectionReasonsQueryKey(options)
    });
};
export const getAtsRejectionReasonsInfiniteQueryKey = (options) => [createQueryKey('getAtsRejectionReasons', options, true)];
export const getAtsRejectionReasonsInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAtsRejectionReasons({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAtsRejectionReasonsInfiniteQueryKey(options)
    });
};
export const getAssessmentPackagesQueryKey = (options) => [createQueryKey('getAssessmentPackages', options)];
export const getAssessmentPackagesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAssessmentPackages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAssessmentPackagesQueryKey(options)
    });
};
export const putAssessmentPackagesMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await putAssessmentPackages({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getAssessmentOrdersOpenQueryKey = (options) => [createQueryKey('getAssessmentOrdersOpen', options)];
export const getAssessmentOrdersOpenOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAssessmentOrdersOpen({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAssessmentOrdersOpenQueryKey(options)
    });
};
export const getAssessmentOrdersOpenInfiniteQueryKey = (options) => [createQueryKey('getAssessmentOrdersOpen', options, true)];
export const getAssessmentOrdersOpenInfiniteOptions = (options) => {
    return infiniteQueryOptions(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page = typeof pageParam === 'object'
                ? pageParam
                : {
                    query: {
                        cursor: pageParam
                    }
                };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAssessmentOrdersOpen({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAssessmentOrdersOpenInfiniteQueryKey(options)
    });
};
export const putAssessmentOrdersAssessmentOrderIdResultMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await putAssessmentOrdersAssessmentOrderIdResult({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postConnectCreateLinkQueryKey = (options) => [createQueryKey('postConnectCreateLink', options)];
export const postConnectCreateLinkOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postConnectCreateLink({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postConnectCreateLinkQueryKey(options)
    });
};
export const postConnectCreateLinkMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postConnectCreateLink({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getConnectIntegrationByTokenTokenQueryKey = (options) => [createQueryKey('getConnectIntegrationByTokenToken', options)];
export const getConnectIntegrationByTokenTokenOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConnectIntegrationByTokenToken({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConnectIntegrationByTokenTokenQueryKey(options)
    });
};
export const postConnectActivateIntegrationQueryKey = (options) => [createQueryKey('postConnectActivateIntegration', options)];
export const postConnectActivateIntegrationOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postConnectActivateIntegration({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postConnectActivateIntegrationQueryKey(options)
    });
};
export const postConnectActivateIntegrationMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postConnectActivateIntegration({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getCustomDatevSystemInformationQueryKey = (options) => [createQueryKey('getCustomDatevSystemInformation', options)];
export const getCustomDatevSystemInformationOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCustomDatevSystemInformation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCustomDatevSystemInformationQueryKey(options)
    });
};
export const postCustomDatevPassthroughQueryKey = (options) => [createQueryKey('postCustomDatevPassthrough', options)];
export const postCustomDatevPassthroughOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postCustomDatevPassthrough({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postCustomDatevPassthroughQueryKey(options)
    });
};
export const postCustomDatevPassthroughMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postCustomDatevPassthrough({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getCustomDatevCheckEauPermissionQueryKey = (options) => [createQueryKey('getCustomDatevCheckEauPermission', options)];
export const getCustomDatevCheckEauPermissionOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCustomDatevCheckEauPermission({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCustomDatevCheckEauPermissionQueryKey(options)
    });
};
export const getCustomDatevEauRequestsEauIdQueryKey = (options) => [createQueryKey('getCustomDatevEauRequestsEauId', options)];
export const getCustomDatevEauRequestsEauIdOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCustomDatevEauRequestsEauId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCustomDatevEauRequestsEauIdQueryKey(options)
    });
};
export const getCustomDatevCheckDocumentPermissionQueryKey = (options) => [createQueryKey('getCustomDatevCheckDocumentPermission', options)];
export const getCustomDatevCheckDocumentPermissionOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCustomDatevCheckDocumentPermission({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCustomDatevCheckDocumentPermissionQueryKey(options)
    });
};
export const getCustomDatevAvailableDocumentsQueryKey = (options) => [createQueryKey('getCustomDatevAvailableDocuments', options)];
export const getCustomDatevAvailableDocumentsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCustomDatevAvailableDocuments({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCustomDatevAvailableDocumentsQueryKey(options)
    });
};
export const postCustomDatevDownloadDocumentQueryKey = (options) => [createQueryKey('postCustomDatevDownloadDocument', options)];
export const postCustomDatevDownloadDocumentOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postCustomDatevDownloadDocument({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postCustomDatevDownloadDocumentQueryKey(options)
    });
};
export const postCustomDatevDownloadDocumentMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postCustomDatevDownloadDocument({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postCustomDatevEmployeesEmployeeIdDownloadDocumentQueryKey = (options) => [createQueryKey('postCustomDatevEmployeesEmployeeIdDownloadDocument', options)];
export const postCustomDatevEmployeesEmployeeIdDownloadDocumentOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postCustomDatevEmployeesEmployeeIdDownloadDocument({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postCustomDatevEmployeesEmployeeIdDownloadDocumentQueryKey(options)
    });
};
export const postCustomDatevEmployeesEmployeeIdDownloadDocumentMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postCustomDatevEmployeesEmployeeIdDownloadDocument({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postCustomDatevEmployeesEmployeeIdEauRequestsQueryKey = (options) => [createQueryKey('postCustomDatevEmployeesEmployeeIdEauRequests', options)];
export const postCustomDatevEmployeesEmployeeIdEauRequestsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postCustomDatevEmployeesEmployeeIdEauRequests({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postCustomDatevEmployeesEmployeeIdEauRequestsQueryKey(options)
    });
};
export const postCustomDatevEmployeesEmployeeIdEauRequestsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postCustomDatevEmployeesEmployeeIdEauRequests({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const putCustomDatevEmployeesEmployeeIdPreparePayrollMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await putCustomDatevEmployeesEmployeeIdPreparePayroll({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const putCustomDatevEmployeesEmployeeIdCompensationsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await putCustomDatevEmployeesEmployeeIdCompensations({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const getCustomDatevCheckWritePermissionQueryKey = (options) => [createQueryKey('getCustomDatevCheckWritePermission', options)];
export const getCustomDatevCheckWritePermissionOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCustomDatevCheckWritePermission({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCustomDatevCheckWritePermissionQueryKey(options)
    });
};
export const getCustomDatevDataPushesQueryKey = (options) => [createQueryKey('getCustomDatevDataPushes', options)];
export const getCustomDatevDataPushesOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getCustomDatevDataPushes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getCustomDatevDataPushesQueryKey(options)
    });
};
export const postCustomDatevPushDataGeneralQueryKey = (options) => [createQueryKey('postCustomDatevPushDataGeneral', options)];
export const postCustomDatevPushDataGeneralOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postCustomDatevPushDataGeneral({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postCustomDatevPushDataGeneralQueryKey(options)
    });
};
export const postCustomDatevPushDataGeneralMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postCustomDatevPushDataGeneral({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postCustomDatevPushDataPayrollQueryKey = (options) => [createQueryKey('postCustomDatevPushDataPayroll', options)];
export const postCustomDatevPushDataPayrollOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postCustomDatevPushDataPayroll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postCustomDatevPushDataPayrollQueryKey(options)
    });
};
export const postCustomDatevPushDataPayrollMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postCustomDatevPushDataPayroll({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
export const postCustomSilaeEmployeesEmployeeIdPayrollSupplementsQueryKey = (options) => [createQueryKey('postCustomSilaeEmployeesEmployeeIdPayrollSupplements', options)];
export const postCustomSilaeEmployeesEmployeeIdPayrollSupplementsOptions = (options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postCustomSilaeEmployeesEmployeeIdPayrollSupplements({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postCustomSilaeEmployeesEmployeeIdPayrollSupplementsQueryKey(options)
    });
};
export const postCustomSilaeEmployeesEmployeeIdPayrollSupplementsMutation = (options) => {
    const mutationOptions = {
        mutationFn: async (localOptions) => {
            const { data } = await postCustomSilaeEmployeesEmployeeIdPayrollSupplements({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};
//# sourceMappingURL=react-query.gen.js.map