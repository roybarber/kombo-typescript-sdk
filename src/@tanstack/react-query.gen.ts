// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '../client'
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query'
import type {
	GetCheckApiKeyData,
	PostForceSyncData,
	PostForceSyncError,
	PostForceSyncResponse,
	PostPassthroughToolApiData,
	PostPassthroughToolApiError,
	PostPassthroughToolApiResponse,
	DeleteIntegrationsIntegrationIdData,
	DeleteIntegrationsIntegrationIdError,
	DeleteIntegrationsIntegrationIdResponse,
	GetIntegrationsIntegrationIdData,
	PostIntegrationsIntegrationIdRelinkData,
	PostIntegrationsIntegrationIdRelinkError,
	PostIntegrationsIntegrationIdRelinkResponse,
	GetIntegrationsIntegrationIdIntegrationFieldsData,
	GetIntegrationsIntegrationIdIntegrationFieldsError,
	GetIntegrationsIntegrationIdIntegrationFieldsResponse,
	PatchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldIdData,
	PatchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldIdError,
	PatchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldIdResponse,
	GetIntegrationsIntegrationIdCustomFieldsData,
	GetIntegrationsIntegrationIdCustomFieldsError,
	GetIntegrationsIntegrationIdCustomFieldsResponse,
	PutIntegrationsIntegrationIdCustomFieldsCustomFieldIdData,
	PutIntegrationsIntegrationIdCustomFieldsCustomFieldIdError,
	PutIntegrationsIntegrationIdCustomFieldsCustomFieldIdResponse,
	GetToolsCategoryData,
	PostHrisProvisioningGroupsGroupIdDiffData,
	PostHrisProvisioningGroupsGroupIdDiffError,
	PostHrisProvisioningGroupsGroupIdDiffResponse,
	PostHrisProvisioningGroupsGroupIdSetupLinksData,
	PostHrisProvisioningGroupsGroupIdSetupLinksError,
	PostHrisProvisioningGroupsGroupIdSetupLinksResponse,
	GetHrisEmployeesData,
	GetHrisEmployeesError,
	GetHrisEmployeesResponse,
	PostHrisEmployeesData,
	PostHrisEmployeesError,
	PostHrisEmployeesResponse,
	PatchHrisEmployeesEmployeeIdData,
	PatchHrisEmployeesEmployeeIdError,
	PatchHrisEmployeesEmployeeIdResponse,
	PostHrisEmployeesEmployeeIdDocumentsData,
	PostHrisEmployeesEmployeeIdDocumentsError,
	PostHrisEmployeesEmployeeIdDocumentsResponse,
	PatchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldIdData,
	PatchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldIdError,
	PatchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldIdResponse,
	GetHrisEmployeeDocumentCategoriesData,
	GetHrisEmployeeDocumentCategoriesError,
	GetHrisEmployeeDocumentCategoriesResponse,
	GetHrisTeamsData,
	GetHrisTeamsError,
	GetHrisTeamsResponse,
	GetHrisGroupsData,
	GetHrisGroupsError,
	GetHrisGroupsResponse,
	GetHrisEmploymentsData,
	GetHrisEmploymentsError,
	GetHrisEmploymentsResponse,
	GetHrisLocationsData,
	GetHrisLocationsError,
	GetHrisLocationsResponse,
	GetHrisAbsenceTypesData,
	GetHrisAbsenceTypesError,
	GetHrisAbsenceTypesResponse,
	GetHrisTimeOffBalancesData,
	GetHrisTimeOffBalancesError,
	GetHrisTimeOffBalancesResponse,
	GetHrisAbsencesData,
	GetHrisAbsencesError,
	GetHrisAbsencesResponse,
	PostHrisAbsencesData,
	PostHrisAbsencesError,
	PostHrisAbsencesResponse,
	DeleteHrisAbsencesAbsenceIdData,
	DeleteHrisAbsencesAbsenceIdError,
	DeleteHrisAbsencesAbsenceIdResponse,
	GetHrisLegalEntitiesData,
	GetHrisLegalEntitiesError,
	GetHrisLegalEntitiesResponse,
	GetHrisAttendanceData,
	GetHrisTimesheetsData,
	GetAtsApplicationsData,
	GetAtsApplicationsError,
	GetAtsApplicationsResponse,
	PutAtsApplicationsApplicationIdStageData,
	PutAtsApplicationsApplicationIdStageError,
	PutAtsApplicationsApplicationIdStageResponse,
	PostAtsApplicationsApplicationIdResultLinksData,
	PostAtsApplicationsApplicationIdResultLinksError,
	PostAtsApplicationsApplicationIdResultLinksResponse,
	PostAtsApplicationsApplicationIdNotesData,
	PostAtsApplicationsApplicationIdNotesError,
	PostAtsApplicationsApplicationIdNotesResponse,
	GetAtsApplicationsApplicationIdAttachmentsData,
	PostAtsApplicationsApplicationIdAttachmentsData,
	PostAtsApplicationsApplicationIdAttachmentsError,
	PostAtsApplicationsApplicationIdAttachmentsResponse,
	PostAtsApplicationsApplicationIdRejectData,
	PostAtsApplicationsApplicationIdRejectError,
	PostAtsApplicationsApplicationIdRejectResponse,
	GetAtsCandidatesData,
	GetAtsCandidatesError,
	GetAtsCandidatesResponse,
	PostAtsCandidatesData,
	PostAtsCandidatesError,
	PostAtsCandidatesResponse,
	PatchAtsCandidatesCandidateIdData,
	PatchAtsCandidatesCandidateIdError,
	PatchAtsCandidatesCandidateIdResponse,
	GetAtsCandidatesCandidateIdAttachmentsData,
	PostAtsCandidatesCandidateIdAttachmentsData,
	PostAtsCandidatesCandidateIdAttachmentsError,
	PostAtsCandidatesCandidateIdAttachmentsResponse,
	PostAtsCandidatesCandidateIdResultLinksData,
	PostAtsCandidatesCandidateIdResultLinksError,
	PostAtsCandidatesCandidateIdResultLinksResponse,
	DeleteAtsCandidatesCandidateIdTagsData,
	DeleteAtsCandidatesCandidateIdTagsError,
	DeleteAtsCandidatesCandidateIdTagsResponse,
	PostAtsCandidatesCandidateIdTagsData,
	PostAtsCandidatesCandidateIdTagsError,
	PostAtsCandidatesCandidateIdTagsResponse,
	PatchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldIdData,
	PatchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldIdError,
	PatchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldIdResponse,
	GetAtsTagsData,
	GetAtsTagsError,
	GetAtsTagsResponse,
	GetAtsApplicationStagesData,
	GetAtsApplicationStagesError,
	GetAtsApplicationStagesResponse,
	GetAtsJobsData,
	GetAtsJobsError,
	GetAtsJobsResponse,
	PostAtsJobsJobIdApplicationsData,
	PostAtsJobsJobIdApplicationsError,
	PostAtsJobsJobIdApplicationsResponse,
	GetAtsUsersData,
	GetAtsUsersError,
	GetAtsUsersResponse,
	GetAtsOffersData,
	GetAtsOffersError,
	GetAtsOffersResponse,
	GetAtsRejectionReasonsData,
	GetAtsRejectionReasonsError,
	GetAtsRejectionReasonsResponse,
	GetAssessmentPackagesData,
	PutAssessmentPackagesData,
	PutAssessmentPackagesError,
	PutAssessmentPackagesResponse,
	GetAssessmentOrdersOpenData,
	GetAssessmentOrdersOpenError,
	GetAssessmentOrdersOpenResponse,
	PutAssessmentOrdersAssessmentOrderIdResultData,
	PutAssessmentOrdersAssessmentOrderIdResultError,
	PutAssessmentOrdersAssessmentOrderIdResultResponse,
	PostConnectCreateLinkData,
	PostConnectCreateLinkError,
	PostConnectCreateLinkResponse,
	GetConnectIntegrationByTokenTokenData,
	PostConnectActivateIntegrationData,
	PostConnectActivateIntegrationError,
	PostConnectActivateIntegrationResponse,
	GetCustomDatevSystemInformationData,
	PostCustomDatevPassthroughData,
	PostCustomDatevPassthroughError,
	PostCustomDatevPassthroughResponse,
	GetCustomDatevCheckEauPermissionData,
	GetCustomDatevEauRequestsEauIdData,
	GetCustomDatevCheckDocumentPermissionData,
	GetCustomDatevAvailableDocumentsData,
	PostCustomDatevDownloadDocumentData,
	PostCustomDatevDownloadDocumentError,
	PostCustomDatevDownloadDocumentResponse,
	PostCustomDatevEmployeesEmployeeIdDownloadDocumentData,
	PostCustomDatevEmployeesEmployeeIdDownloadDocumentError,
	PostCustomDatevEmployeesEmployeeIdDownloadDocumentResponse,
	PostCustomDatevEmployeesEmployeeIdEauRequestsData,
	PostCustomDatevEmployeesEmployeeIdEauRequestsError,
	PostCustomDatevEmployeesEmployeeIdEauRequestsResponse,
	PutCustomDatevEmployeesEmployeeIdPreparePayrollData,
	PutCustomDatevEmployeesEmployeeIdPreparePayrollError,
	PutCustomDatevEmployeesEmployeeIdPreparePayrollResponse,
	PutCustomDatevEmployeesEmployeeIdCompensationsData,
	PutCustomDatevEmployeesEmployeeIdCompensationsError,
	PutCustomDatevEmployeesEmployeeIdCompensationsResponse,
	GetCustomDatevCheckWritePermissionData,
	GetCustomDatevDataPushesData,
	PostCustomDatevPushDataGeneralData,
	PostCustomDatevPushDataGeneralError,
	PostCustomDatevPushDataGeneralResponse,
	PostCustomDatevPushDataPayrollData,
	PostCustomDatevPushDataPayrollError,
	PostCustomDatevPushDataPayrollResponse,
	PostCustomSilaeEmployeesEmployeeIdPayrollSupplementsData,
	PostCustomSilaeEmployeesEmployeeIdPayrollSupplementsError,
	PostCustomSilaeEmployeesEmployeeIdPayrollSupplementsResponse
} from '../types.gen'
import {
	client,
	getCheckApiKey,
	postForceSync,
	postPassthroughToolApi,
	deleteIntegrationsIntegrationId,
	getIntegrationsIntegrationId,
	postIntegrationsIntegrationIdRelink,
	getIntegrationsIntegrationIdIntegrationFields,
	patchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldId,
	getIntegrationsIntegrationIdCustomFields,
	putIntegrationsIntegrationIdCustomFieldsCustomFieldId,
	getToolsCategory,
	postHrisProvisioningGroupsGroupIdDiff,
	postHrisProvisioningGroupsGroupIdSetupLinks,
	getHrisEmployees,
	postHrisEmployees,
	patchHrisEmployeesEmployeeId,
	postHrisEmployeesEmployeeIdDocuments,
	patchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldId,
	getHrisEmployeeDocumentCategories,
	getHrisTeams,
	getHrisGroups,
	getHrisEmployments,
	getHrisLocations,
	getHrisAbsenceTypes,
	getHrisTimeOffBalances,
	getHrisAbsences,
	postHrisAbsences,
	deleteHrisAbsencesAbsenceId,
	getHrisLegalEntities,
	getHrisAttendance,
	getHrisTimesheets,
	getAtsApplications,
	putAtsApplicationsApplicationIdStage,
	postAtsApplicationsApplicationIdResultLinks,
	postAtsApplicationsApplicationIdNotes,
	getAtsApplicationsApplicationIdAttachments,
	postAtsApplicationsApplicationIdAttachments,
	postAtsApplicationsApplicationIdReject,
	getAtsCandidates,
	postAtsCandidates,
	patchAtsCandidatesCandidateId,
	getAtsCandidatesCandidateIdAttachments,
	postAtsCandidatesCandidateIdAttachments,
	postAtsCandidatesCandidateIdResultLinks,
	deleteAtsCandidatesCandidateIdTags,
	postAtsCandidatesCandidateIdTags,
	patchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldId,
	getAtsTags,
	getAtsApplicationStages,
	getAtsJobs,
	postAtsJobsJobIdApplications,
	getAtsUsers,
	getAtsOffers,
	getAtsRejectionReasons,
	getAssessmentPackages,
	putAssessmentPackages,
	getAssessmentOrdersOpen,
	putAssessmentOrdersAssessmentOrderIdResult,
	postConnectCreateLink,
	getConnectIntegrationByTokenToken,
	postConnectActivateIntegration,
	getCustomDatevSystemInformation,
	postCustomDatevPassthrough,
	getCustomDatevCheckEauPermission,
	getCustomDatevEauRequestsEauId,
	getCustomDatevCheckDocumentPermission,
	getCustomDatevAvailableDocuments,
	postCustomDatevDownloadDocument,
	postCustomDatevEmployeesEmployeeIdDownloadDocument,
	postCustomDatevEmployeesEmployeeIdEauRequests,
	putCustomDatevEmployeesEmployeeIdPreparePayroll,
	putCustomDatevEmployeesEmployeeIdCompensations,
	getCustomDatevCheckWritePermission,
	getCustomDatevDataPushes,
	postCustomDatevPushDataGeneral,
	postCustomDatevPushDataPayroll,
	postCustomSilaeEmployeesEmployeeIdPayrollSupplements
} from '../sdk.gen'

type QueryKey<TOptions extends Options> = [
	Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
		_id: string
		_infinite?: boolean
	}
]

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
	const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0]
	if (infinite) {
		params._infinite = infinite
	}
	if (options?.body) {
		params.body = options.body
	}
	if (options?.headers) {
		params.headers = options.headers
	}
	if (options?.path) {
		params.path = options.path
	}
	if (options?.query) {
		params.query = options.query
	}
	return params
}

export const getCheckApiKeyQueryKey = (options?: Options<GetCheckApiKeyData>) => [createQueryKey('getCheckApiKey', options)]

export const getCheckApiKeyOptions = (options?: Options<GetCheckApiKeyData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCheckApiKey({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getCheckApiKeyQueryKey(options)
	})
}

export const postForceSyncQueryKey = (options: Options<PostForceSyncData>) => [createQueryKey('postForceSync', options)]

export const postForceSyncOptions = (options: Options<PostForceSyncData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postForceSync({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postForceSyncQueryKey(options)
	})
}

export const postForceSyncMutation = (options?: Partial<Options<PostForceSyncData>>) => {
	const mutationOptions: UseMutationOptions<PostForceSyncResponse, PostForceSyncError, Options<PostForceSyncData>> = {
		mutationFn: async localOptions => {
			const { data } = await postForceSync({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postPassthroughToolApiQueryKey = (options: Options<PostPassthroughToolApiData>) => [createQueryKey('postPassthroughToolApi', options)]

export const postPassthroughToolApiOptions = (options: Options<PostPassthroughToolApiData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postPassthroughToolApi({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postPassthroughToolApiQueryKey(options)
	})
}

export const postPassthroughToolApiMutation = (options?: Partial<Options<PostPassthroughToolApiData>>) => {
	const mutationOptions: UseMutationOptions<PostPassthroughToolApiResponse, PostPassthroughToolApiError, Options<PostPassthroughToolApiData>> = {
		mutationFn: async localOptions => {
			const { data } = await postPassthroughToolApi({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const deleteIntegrationsIntegrationIdMutation = (options?: Partial<Options<DeleteIntegrationsIntegrationIdData>>) => {
	const mutationOptions: UseMutationOptions<DeleteIntegrationsIntegrationIdResponse, DeleteIntegrationsIntegrationIdError, Options<DeleteIntegrationsIntegrationIdData>> = {
		mutationFn: async localOptions => {
			const { data } = await deleteIntegrationsIntegrationId({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getIntegrationsIntegrationIdQueryKey = (options: Options<GetIntegrationsIntegrationIdData>) => [createQueryKey('getIntegrationsIntegrationId', options)]

export const getIntegrationsIntegrationIdOptions = (options: Options<GetIntegrationsIntegrationIdData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getIntegrationsIntegrationId({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getIntegrationsIntegrationIdQueryKey(options)
	})
}

export const postIntegrationsIntegrationIdRelinkQueryKey = (options: Options<PostIntegrationsIntegrationIdRelinkData>) => [createQueryKey('postIntegrationsIntegrationIdRelink', options)]

export const postIntegrationsIntegrationIdRelinkOptions = (options: Options<PostIntegrationsIntegrationIdRelinkData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postIntegrationsIntegrationIdRelink({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postIntegrationsIntegrationIdRelinkQueryKey(options)
	})
}

export const postIntegrationsIntegrationIdRelinkMutation = (options?: Partial<Options<PostIntegrationsIntegrationIdRelinkData>>) => {
	const mutationOptions: UseMutationOptions<PostIntegrationsIntegrationIdRelinkResponse, PostIntegrationsIntegrationIdRelinkError, Options<PostIntegrationsIntegrationIdRelinkData>> = {
		mutationFn: async localOptions => {
			const { data } = await postIntegrationsIntegrationIdRelink({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getIntegrationsIntegrationIdIntegrationFieldsQueryKey = (options: Options<GetIntegrationsIntegrationIdIntegrationFieldsData>) => [createQueryKey('getIntegrationsIntegrationIdIntegrationFields', options)]

export const getIntegrationsIntegrationIdIntegrationFieldsOptions = (options: Options<GetIntegrationsIntegrationIdIntegrationFieldsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getIntegrationsIntegrationIdIntegrationFields({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getIntegrationsIntegrationIdIntegrationFieldsQueryKey(options)
	})
}

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
	const params = queryKey[0]
	if (page.body) {
		params.body = {
			...(queryKey[0].body as any),
			...(page.body as any)
		}
	}
	if (page.headers) {
		params.headers = {
			...queryKey[0].headers,
			...page.headers
		}
	}
	if (page.path) {
		params.path = {
			...(queryKey[0].path as any),
			...(page.path as any)
		}
	}
	if (page.query) {
		params.query = {
			...(queryKey[0].query as any),
			...(page.query as any)
		}
	}
	return params as unknown as typeof page
}

export const getIntegrationsIntegrationIdIntegrationFieldsInfiniteQueryKey = (options: Options<GetIntegrationsIntegrationIdIntegrationFieldsData>): QueryKey<Options<GetIntegrationsIntegrationIdIntegrationFieldsData>> => [createQueryKey('getIntegrationsIntegrationIdIntegrationFields', options, true)]

export const getIntegrationsIntegrationIdIntegrationFieldsInfiniteOptions = (options: Options<GetIntegrationsIntegrationIdIntegrationFieldsData>) => {
	return infiniteQueryOptions<GetIntegrationsIntegrationIdIntegrationFieldsResponse, GetIntegrationsIntegrationIdIntegrationFieldsError, InfiniteData<GetIntegrationsIntegrationIdIntegrationFieldsResponse>, QueryKey<Options<GetIntegrationsIntegrationIdIntegrationFieldsData>>, GetIntegrationsIntegrationIdIntegrationFieldsParameterCursor | Pick<QueryKey<Options<GetIntegrationsIntegrationIdIntegrationFieldsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetIntegrationsIntegrationIdIntegrationFieldsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getIntegrationsIntegrationIdIntegrationFields({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getIntegrationsIntegrationIdIntegrationFieldsInfiniteQueryKey(options)
		}
	)
}

export const patchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldIdMutation = (options?: Partial<Options<PatchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldIdData>>) => {
	const mutationOptions: UseMutationOptions<PatchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldIdResponse, PatchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldIdError, Options<PatchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldIdData>> = {
		mutationFn: async localOptions => {
			const { data } = await patchIntegrationsIntegrationIdIntegrationFieldsIntegrationFieldId({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getIntegrationsIntegrationIdCustomFieldsQueryKey = (options: Options<GetIntegrationsIntegrationIdCustomFieldsData>) => [createQueryKey('getIntegrationsIntegrationIdCustomFields', options)]

export const getIntegrationsIntegrationIdCustomFieldsOptions = (options: Options<GetIntegrationsIntegrationIdCustomFieldsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getIntegrationsIntegrationIdCustomFields({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getIntegrationsIntegrationIdCustomFieldsQueryKey(options)
	})
}

export const getIntegrationsIntegrationIdCustomFieldsInfiniteQueryKey = (options: Options<GetIntegrationsIntegrationIdCustomFieldsData>): QueryKey<Options<GetIntegrationsIntegrationIdCustomFieldsData>> => [createQueryKey('getIntegrationsIntegrationIdCustomFields', options, true)]

export const getIntegrationsIntegrationIdCustomFieldsInfiniteOptions = (options: Options<GetIntegrationsIntegrationIdCustomFieldsData>) => {
	return infiniteQueryOptions<GetIntegrationsIntegrationIdCustomFieldsResponse, GetIntegrationsIntegrationIdCustomFieldsError, InfiniteData<GetIntegrationsIntegrationIdCustomFieldsResponse>, QueryKey<Options<GetIntegrationsIntegrationIdCustomFieldsData>>, GetIntegrationsIntegrationIdCustomFieldsParameterCursor | Pick<QueryKey<Options<GetIntegrationsIntegrationIdCustomFieldsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetIntegrationsIntegrationIdCustomFieldsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getIntegrationsIntegrationIdCustomFields({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getIntegrationsIntegrationIdCustomFieldsInfiniteQueryKey(options)
		}
	)
}

export const putIntegrationsIntegrationIdCustomFieldsCustomFieldIdMutation = (options?: Partial<Options<PutIntegrationsIntegrationIdCustomFieldsCustomFieldIdData>>) => {
	const mutationOptions: UseMutationOptions<PutIntegrationsIntegrationIdCustomFieldsCustomFieldIdResponse, PutIntegrationsIntegrationIdCustomFieldsCustomFieldIdError, Options<PutIntegrationsIntegrationIdCustomFieldsCustomFieldIdData>> = {
		mutationFn: async localOptions => {
			const { data } = await putIntegrationsIntegrationIdCustomFieldsCustomFieldId({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getToolsCategoryQueryKey = (options: Options<GetToolsCategoryData>) => [createQueryKey('getToolsCategory', options)]

export const getToolsCategoryOptions = (options: Options<GetToolsCategoryData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getToolsCategory({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getToolsCategoryQueryKey(options)
	})
}

export const postHrisProvisioningGroupsGroupIdDiffQueryKey = (options: Options<PostHrisProvisioningGroupsGroupIdDiffData>) => [createQueryKey('postHrisProvisioningGroupsGroupIdDiff', options)]

export const postHrisProvisioningGroupsGroupIdDiffOptions = (options: Options<PostHrisProvisioningGroupsGroupIdDiffData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postHrisProvisioningGroupsGroupIdDiff({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postHrisProvisioningGroupsGroupIdDiffQueryKey(options)
	})
}

export const postHrisProvisioningGroupsGroupIdDiffMutation = (options?: Partial<Options<PostHrisProvisioningGroupsGroupIdDiffData>>) => {
	const mutationOptions: UseMutationOptions<PostHrisProvisioningGroupsGroupIdDiffResponse, PostHrisProvisioningGroupsGroupIdDiffError, Options<PostHrisProvisioningGroupsGroupIdDiffData>> = {
		mutationFn: async localOptions => {
			const { data } = await postHrisProvisioningGroupsGroupIdDiff({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postHrisProvisioningGroupsGroupIdSetupLinksQueryKey = (options: Options<PostHrisProvisioningGroupsGroupIdSetupLinksData>) => [createQueryKey('postHrisProvisioningGroupsGroupIdSetupLinks', options)]

export const postHrisProvisioningGroupsGroupIdSetupLinksOptions = (options: Options<PostHrisProvisioningGroupsGroupIdSetupLinksData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postHrisProvisioningGroupsGroupIdSetupLinks({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postHrisProvisioningGroupsGroupIdSetupLinksQueryKey(options)
	})
}

export const postHrisProvisioningGroupsGroupIdSetupLinksMutation = (options?: Partial<Options<PostHrisProvisioningGroupsGroupIdSetupLinksData>>) => {
	const mutationOptions: UseMutationOptions<PostHrisProvisioningGroupsGroupIdSetupLinksResponse, PostHrisProvisioningGroupsGroupIdSetupLinksError, Options<PostHrisProvisioningGroupsGroupIdSetupLinksData>> = {
		mutationFn: async localOptions => {
			const { data } = await postHrisProvisioningGroupsGroupIdSetupLinks({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getHrisEmployeesQueryKey = (options: Options<GetHrisEmployeesData>) => [createQueryKey('getHrisEmployees', options)]

export const getHrisEmployeesOptions = (options: Options<GetHrisEmployeesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisEmployees({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisEmployeesQueryKey(options)
	})
}

export const getHrisEmployeesInfiniteQueryKey = (options: Options<GetHrisEmployeesData>): QueryKey<Options<GetHrisEmployeesData>> => [createQueryKey('getHrisEmployees', options, true)]

export const getHrisEmployeesInfiniteOptions = (options: Options<GetHrisEmployeesData>) => {
	return infiniteQueryOptions<GetHrisEmployeesResponse, GetHrisEmployeesError, InfiniteData<GetHrisEmployeesResponse>, QueryKey<Options<GetHrisEmployeesData>>, GetHrisEmployeesParameterCursor | Pick<QueryKey<Options<GetHrisEmployeesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetHrisEmployeesData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getHrisEmployees({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getHrisEmployeesInfiniteQueryKey(options)
		}
	)
}

export const postHrisEmployeesQueryKey = (options: Options<PostHrisEmployeesData>) => [createQueryKey('postHrisEmployees', options)]

export const postHrisEmployeesOptions = (options: Options<PostHrisEmployeesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postHrisEmployees({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postHrisEmployeesQueryKey(options)
	})
}

export const postHrisEmployeesMutation = (options?: Partial<Options<PostHrisEmployeesData>>) => {
	const mutationOptions: UseMutationOptions<PostHrisEmployeesResponse, PostHrisEmployeesError, Options<PostHrisEmployeesData>> = {
		mutationFn: async localOptions => {
			const { data } = await postHrisEmployees({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const patchHrisEmployeesEmployeeIdMutation = (options?: Partial<Options<PatchHrisEmployeesEmployeeIdData>>) => {
	const mutationOptions: UseMutationOptions<PatchHrisEmployeesEmployeeIdResponse, PatchHrisEmployeesEmployeeIdError, Options<PatchHrisEmployeesEmployeeIdData>> = {
		mutationFn: async localOptions => {
			const { data } = await patchHrisEmployeesEmployeeId({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postHrisEmployeesEmployeeIdDocumentsQueryKey = (options: Options<PostHrisEmployeesEmployeeIdDocumentsData>) => [createQueryKey('postHrisEmployeesEmployeeIdDocuments', options)]

export const postHrisEmployeesEmployeeIdDocumentsOptions = (options: Options<PostHrisEmployeesEmployeeIdDocumentsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postHrisEmployeesEmployeeIdDocuments({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postHrisEmployeesEmployeeIdDocumentsQueryKey(options)
	})
}

export const postHrisEmployeesEmployeeIdDocumentsMutation = (options?: Partial<Options<PostHrisEmployeesEmployeeIdDocumentsData>>) => {
	const mutationOptions: UseMutationOptions<PostHrisEmployeesEmployeeIdDocumentsResponse, PostHrisEmployeesEmployeeIdDocumentsError, Options<PostHrisEmployeesEmployeeIdDocumentsData>> = {
		mutationFn: async localOptions => {
			const { data } = await postHrisEmployeesEmployeeIdDocuments({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const patchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldIdMutation = (options?: Partial<Options<PatchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldIdData>>) => {
	const mutationOptions: UseMutationOptions<PatchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldIdResponse, PatchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldIdError, Options<PatchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldIdData>> = {
		mutationFn: async localOptions => {
			const { data } = await patchHrisEmployeesEmployeeIdIntegrationFieldsIntegrationFieldId({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getHrisEmployeeDocumentCategoriesQueryKey = (options: Options<GetHrisEmployeeDocumentCategoriesData>) => [createQueryKey('getHrisEmployeeDocumentCategories', options)]

export const getHrisEmployeeDocumentCategoriesOptions = (options: Options<GetHrisEmployeeDocumentCategoriesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisEmployeeDocumentCategories({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisEmployeeDocumentCategoriesQueryKey(options)
	})
}

export const getHrisEmployeeDocumentCategoriesInfiniteQueryKey = (options: Options<GetHrisEmployeeDocumentCategoriesData>): QueryKey<Options<GetHrisEmployeeDocumentCategoriesData>> => [createQueryKey('getHrisEmployeeDocumentCategories', options, true)]

export const getHrisEmployeeDocumentCategoriesInfiniteOptions = (options: Options<GetHrisEmployeeDocumentCategoriesData>) => {
	return infiniteQueryOptions<GetHrisEmployeeDocumentCategoriesResponse, GetHrisEmployeeDocumentCategoriesError, InfiniteData<GetHrisEmployeeDocumentCategoriesResponse>, QueryKey<Options<GetHrisEmployeeDocumentCategoriesData>>, GetHrisEmployeeDocumentCategoriesParameterCursor | Pick<QueryKey<Options<GetHrisEmployeeDocumentCategoriesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetHrisEmployeeDocumentCategoriesData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getHrisEmployeeDocumentCategories({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getHrisEmployeeDocumentCategoriesInfiniteQueryKey(options)
		}
	)
}

export const getHrisTeamsQueryKey = (options: Options<GetHrisTeamsData>) => [createQueryKey('getHrisTeams', options)]

export const getHrisTeamsOptions = (options: Options<GetHrisTeamsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisTeams({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisTeamsQueryKey(options)
	})
}

export const getHrisTeamsInfiniteQueryKey = (options: Options<GetHrisTeamsData>): QueryKey<Options<GetHrisTeamsData>> => [createQueryKey('getHrisTeams', options, true)]

export const getHrisTeamsInfiniteOptions = (options: Options<GetHrisTeamsData>) => {
	return infiniteQueryOptions<GetHrisTeamsResponse, GetHrisTeamsError, InfiniteData<GetHrisTeamsResponse>, QueryKey<Options<GetHrisTeamsData>>, GetHrisTeamsParameterCursor | Pick<QueryKey<Options<GetHrisTeamsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetHrisTeamsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getHrisTeams({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getHrisTeamsInfiniteQueryKey(options)
		}
	)
}

export const getHrisGroupsQueryKey = (options: Options<GetHrisGroupsData>) => [createQueryKey('getHrisGroups', options)]

export const getHrisGroupsOptions = (options: Options<GetHrisGroupsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisGroups({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisGroupsQueryKey(options)
	})
}

export const getHrisGroupsInfiniteQueryKey = (options: Options<GetHrisGroupsData>): QueryKey<Options<GetHrisGroupsData>> => [createQueryKey('getHrisGroups', options, true)]

export const getHrisGroupsInfiniteOptions = (options: Options<GetHrisGroupsData>) => {
	return infiniteQueryOptions<GetHrisGroupsResponse, GetHrisGroupsError, InfiniteData<GetHrisGroupsResponse>, QueryKey<Options<GetHrisGroupsData>>, GetHrisGroupsParameterCursor | Pick<QueryKey<Options<GetHrisGroupsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetHrisGroupsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getHrisGroups({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getHrisGroupsInfiniteQueryKey(options)
		}
	)
}

export const getHrisEmploymentsQueryKey = (options: Options<GetHrisEmploymentsData>) => [createQueryKey('getHrisEmployments', options)]

export const getHrisEmploymentsOptions = (options: Options<GetHrisEmploymentsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisEmployments({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisEmploymentsQueryKey(options)
	})
}

export const getHrisEmploymentsInfiniteQueryKey = (options: Options<GetHrisEmploymentsData>): QueryKey<Options<GetHrisEmploymentsData>> => [createQueryKey('getHrisEmployments', options, true)]

export const getHrisEmploymentsInfiniteOptions = (options: Options<GetHrisEmploymentsData>) => {
	return infiniteQueryOptions<GetHrisEmploymentsResponse, GetHrisEmploymentsError, InfiniteData<GetHrisEmploymentsResponse>, QueryKey<Options<GetHrisEmploymentsData>>, GetHrisEmploymentsParameterCursor | Pick<QueryKey<Options<GetHrisEmploymentsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetHrisEmploymentsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getHrisEmployments({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getHrisEmploymentsInfiniteQueryKey(options)
		}
	)
}

export const getHrisLocationsQueryKey = (options: Options<GetHrisLocationsData>) => [createQueryKey('getHrisLocations', options)]

export const getHrisLocationsOptions = (options: Options<GetHrisLocationsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisLocations({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisLocationsQueryKey(options)
	})
}

export const getHrisLocationsInfiniteQueryKey = (options: Options<GetHrisLocationsData>): QueryKey<Options<GetHrisLocationsData>> => [createQueryKey('getHrisLocations', options, true)]

export const getHrisLocationsInfiniteOptions = (options: Options<GetHrisLocationsData>) => {
	return infiniteQueryOptions<GetHrisLocationsResponse, GetHrisLocationsError, InfiniteData<GetHrisLocationsResponse>, QueryKey<Options<GetHrisLocationsData>>, GetHrisLocationsParameterCursor | Pick<QueryKey<Options<GetHrisLocationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetHrisLocationsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getHrisLocations({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getHrisLocationsInfiniteQueryKey(options)
		}
	)
}

export const getHrisAbsenceTypesQueryKey = (options: Options<GetHrisAbsenceTypesData>) => [createQueryKey('getHrisAbsenceTypes', options)]

export const getHrisAbsenceTypesOptions = (options: Options<GetHrisAbsenceTypesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisAbsenceTypes({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisAbsenceTypesQueryKey(options)
	})
}

export const getHrisAbsenceTypesInfiniteQueryKey = (options: Options<GetHrisAbsenceTypesData>): QueryKey<Options<GetHrisAbsenceTypesData>> => [createQueryKey('getHrisAbsenceTypes', options, true)]

export const getHrisAbsenceTypesInfiniteOptions = (options: Options<GetHrisAbsenceTypesData>) => {
	return infiniteQueryOptions<GetHrisAbsenceTypesResponse, GetHrisAbsenceTypesError, InfiniteData<GetHrisAbsenceTypesResponse>, QueryKey<Options<GetHrisAbsenceTypesData>>, GetHrisAbsenceTypesParameterCursor | Pick<QueryKey<Options<GetHrisAbsenceTypesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetHrisAbsenceTypesData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getHrisAbsenceTypes({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getHrisAbsenceTypesInfiniteQueryKey(options)
		}
	)
}

export const getHrisTimeOffBalancesQueryKey = (options: Options<GetHrisTimeOffBalancesData>) => [createQueryKey('getHrisTimeOffBalances', options)]

export const getHrisTimeOffBalancesOptions = (options: Options<GetHrisTimeOffBalancesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisTimeOffBalances({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisTimeOffBalancesQueryKey(options)
	})
}

export const getHrisTimeOffBalancesInfiniteQueryKey = (options: Options<GetHrisTimeOffBalancesData>): QueryKey<Options<GetHrisTimeOffBalancesData>> => [createQueryKey('getHrisTimeOffBalances', options, true)]

export const getHrisTimeOffBalancesInfiniteOptions = (options: Options<GetHrisTimeOffBalancesData>) => {
	return infiniteQueryOptions<GetHrisTimeOffBalancesResponse, GetHrisTimeOffBalancesError, InfiniteData<GetHrisTimeOffBalancesResponse>, QueryKey<Options<GetHrisTimeOffBalancesData>>, GetHrisTimeOffBalancesParameterCursor | Pick<QueryKey<Options<GetHrisTimeOffBalancesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetHrisTimeOffBalancesData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getHrisTimeOffBalances({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getHrisTimeOffBalancesInfiniteQueryKey(options)
		}
	)
}

export const getHrisAbsencesQueryKey = (options: Options<GetHrisAbsencesData>) => [createQueryKey('getHrisAbsences', options)]

export const getHrisAbsencesOptions = (options: Options<GetHrisAbsencesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisAbsences({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisAbsencesQueryKey(options)
	})
}

export const getHrisAbsencesInfiniteQueryKey = (options: Options<GetHrisAbsencesData>): QueryKey<Options<GetHrisAbsencesData>> => [createQueryKey('getHrisAbsences', options, true)]

export const getHrisAbsencesInfiniteOptions = (options: Options<GetHrisAbsencesData>) => {
	return infiniteQueryOptions<GetHrisAbsencesResponse, GetHrisAbsencesError, InfiniteData<GetHrisAbsencesResponse>, QueryKey<Options<GetHrisAbsencesData>>, GetHrisAbsencesParameterCursor | Pick<QueryKey<Options<GetHrisAbsencesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetHrisAbsencesData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getHrisAbsences({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getHrisAbsencesInfiniteQueryKey(options)
		}
	)
}

export const postHrisAbsencesQueryKey = (options: Options<PostHrisAbsencesData>) => [createQueryKey('postHrisAbsences', options)]

export const postHrisAbsencesOptions = (options: Options<PostHrisAbsencesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postHrisAbsences({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postHrisAbsencesQueryKey(options)
	})
}

export const postHrisAbsencesMutation = (options?: Partial<Options<PostHrisAbsencesData>>) => {
	const mutationOptions: UseMutationOptions<PostHrisAbsencesResponse, PostHrisAbsencesError, Options<PostHrisAbsencesData>> = {
		mutationFn: async localOptions => {
			const { data } = await postHrisAbsences({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const deleteHrisAbsencesAbsenceIdMutation = (options?: Partial<Options<DeleteHrisAbsencesAbsenceIdData>>) => {
	const mutationOptions: UseMutationOptions<DeleteHrisAbsencesAbsenceIdResponse, DeleteHrisAbsencesAbsenceIdError, Options<DeleteHrisAbsencesAbsenceIdData>> = {
		mutationFn: async localOptions => {
			const { data } = await deleteHrisAbsencesAbsenceId({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getHrisLegalEntitiesQueryKey = (options: Options<GetHrisLegalEntitiesData>) => [createQueryKey('getHrisLegalEntities', options)]

export const getHrisLegalEntitiesOptions = (options: Options<GetHrisLegalEntitiesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisLegalEntities({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisLegalEntitiesQueryKey(options)
	})
}

export const getHrisLegalEntitiesInfiniteQueryKey = (options: Options<GetHrisLegalEntitiesData>): QueryKey<Options<GetHrisLegalEntitiesData>> => [createQueryKey('getHrisLegalEntities', options, true)]

export const getHrisLegalEntitiesInfiniteOptions = (options: Options<GetHrisLegalEntitiesData>) => {
	return infiniteQueryOptions<GetHrisLegalEntitiesResponse, GetHrisLegalEntitiesError, InfiniteData<GetHrisLegalEntitiesResponse>, QueryKey<Options<GetHrisLegalEntitiesData>>, GetHrisLegalEntitiesParameterCursor | Pick<QueryKey<Options<GetHrisLegalEntitiesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetHrisLegalEntitiesData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getHrisLegalEntities({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getHrisLegalEntitiesInfiniteQueryKey(options)
		}
	)
}

export const getHrisAttendanceQueryKey = (options: Options<GetHrisAttendanceData>) => [createQueryKey('getHrisAttendance', options)]

export const getHrisAttendanceOptions = (options: Options<GetHrisAttendanceData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisAttendance({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisAttendanceQueryKey(options)
	})
}

export const getHrisTimesheetsQueryKey = (options: Options<GetHrisTimesheetsData>) => [createQueryKey('getHrisTimesheets', options)]

export const getHrisTimesheetsOptions = (options: Options<GetHrisTimesheetsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getHrisTimesheets({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getHrisTimesheetsQueryKey(options)
	})
}

export const getAtsApplicationsQueryKey = (options: Options<GetAtsApplicationsData>) => [createQueryKey('getAtsApplications', options)]

export const getAtsApplicationsOptions = (options: Options<GetAtsApplicationsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAtsApplications({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAtsApplicationsQueryKey(options)
	})
}

export const getAtsApplicationsInfiniteQueryKey = (options: Options<GetAtsApplicationsData>): QueryKey<Options<GetAtsApplicationsData>> => [createQueryKey('getAtsApplications', options, true)]

export const getAtsApplicationsInfiniteOptions = (options: Options<GetAtsApplicationsData>) => {
	return infiniteQueryOptions<GetAtsApplicationsResponse, GetAtsApplicationsError, InfiniteData<GetAtsApplicationsResponse>, QueryKey<Options<GetAtsApplicationsData>>, GetAtsApplicationsParameterCursor | Pick<QueryKey<Options<GetAtsApplicationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetAtsApplicationsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getAtsApplications({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getAtsApplicationsInfiniteQueryKey(options)
		}
	)
}

export const putAtsApplicationsApplicationIdStageMutation = (options?: Partial<Options<PutAtsApplicationsApplicationIdStageData>>) => {
	const mutationOptions: UseMutationOptions<PutAtsApplicationsApplicationIdStageResponse, PutAtsApplicationsApplicationIdStageError, Options<PutAtsApplicationsApplicationIdStageData>> = {
		mutationFn: async localOptions => {
			const { data } = await putAtsApplicationsApplicationIdStage({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postAtsApplicationsApplicationIdResultLinksQueryKey = (options: Options<PostAtsApplicationsApplicationIdResultLinksData>) => [createQueryKey('postAtsApplicationsApplicationIdResultLinks', options)]

export const postAtsApplicationsApplicationIdResultLinksOptions = (options: Options<PostAtsApplicationsApplicationIdResultLinksData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postAtsApplicationsApplicationIdResultLinks({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postAtsApplicationsApplicationIdResultLinksQueryKey(options)
	})
}

export const postAtsApplicationsApplicationIdResultLinksMutation = (options?: Partial<Options<PostAtsApplicationsApplicationIdResultLinksData>>) => {
	const mutationOptions: UseMutationOptions<PostAtsApplicationsApplicationIdResultLinksResponse, PostAtsApplicationsApplicationIdResultLinksError, Options<PostAtsApplicationsApplicationIdResultLinksData>> = {
		mutationFn: async localOptions => {
			const { data } = await postAtsApplicationsApplicationIdResultLinks({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postAtsApplicationsApplicationIdNotesQueryKey = (options: Options<PostAtsApplicationsApplicationIdNotesData>) => [createQueryKey('postAtsApplicationsApplicationIdNotes', options)]

export const postAtsApplicationsApplicationIdNotesOptions = (options: Options<PostAtsApplicationsApplicationIdNotesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postAtsApplicationsApplicationIdNotes({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postAtsApplicationsApplicationIdNotesQueryKey(options)
	})
}

export const postAtsApplicationsApplicationIdNotesMutation = (options?: Partial<Options<PostAtsApplicationsApplicationIdNotesData>>) => {
	const mutationOptions: UseMutationOptions<PostAtsApplicationsApplicationIdNotesResponse, PostAtsApplicationsApplicationIdNotesError, Options<PostAtsApplicationsApplicationIdNotesData>> = {
		mutationFn: async localOptions => {
			const { data } = await postAtsApplicationsApplicationIdNotes({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getAtsApplicationsApplicationIdAttachmentsQueryKey = (options: Options<GetAtsApplicationsApplicationIdAttachmentsData>) => [createQueryKey('getAtsApplicationsApplicationIdAttachments', options)]

export const getAtsApplicationsApplicationIdAttachmentsOptions = (options: Options<GetAtsApplicationsApplicationIdAttachmentsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAtsApplicationsApplicationIdAttachments({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAtsApplicationsApplicationIdAttachmentsQueryKey(options)
	})
}

export const postAtsApplicationsApplicationIdAttachmentsQueryKey = (options: Options<PostAtsApplicationsApplicationIdAttachmentsData>) => [createQueryKey('postAtsApplicationsApplicationIdAttachments', options)]

export const postAtsApplicationsApplicationIdAttachmentsOptions = (options: Options<PostAtsApplicationsApplicationIdAttachmentsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postAtsApplicationsApplicationIdAttachments({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postAtsApplicationsApplicationIdAttachmentsQueryKey(options)
	})
}

export const postAtsApplicationsApplicationIdAttachmentsMutation = (options?: Partial<Options<PostAtsApplicationsApplicationIdAttachmentsData>>) => {
	const mutationOptions: UseMutationOptions<PostAtsApplicationsApplicationIdAttachmentsResponse, PostAtsApplicationsApplicationIdAttachmentsError, Options<PostAtsApplicationsApplicationIdAttachmentsData>> = {
		mutationFn: async localOptions => {
			const { data } = await postAtsApplicationsApplicationIdAttachments({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postAtsApplicationsApplicationIdRejectQueryKey = (options: Options<PostAtsApplicationsApplicationIdRejectData>) => [createQueryKey('postAtsApplicationsApplicationIdReject', options)]

export const postAtsApplicationsApplicationIdRejectOptions = (options: Options<PostAtsApplicationsApplicationIdRejectData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postAtsApplicationsApplicationIdReject({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postAtsApplicationsApplicationIdRejectQueryKey(options)
	})
}

export const postAtsApplicationsApplicationIdRejectMutation = (options?: Partial<Options<PostAtsApplicationsApplicationIdRejectData>>) => {
	const mutationOptions: UseMutationOptions<PostAtsApplicationsApplicationIdRejectResponse, PostAtsApplicationsApplicationIdRejectError, Options<PostAtsApplicationsApplicationIdRejectData>> = {
		mutationFn: async localOptions => {
			const { data } = await postAtsApplicationsApplicationIdReject({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getAtsCandidatesQueryKey = (options: Options<GetAtsCandidatesData>) => [createQueryKey('getAtsCandidates', options)]

export const getAtsCandidatesOptions = (options: Options<GetAtsCandidatesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAtsCandidates({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAtsCandidatesQueryKey(options)
	})
}

export const getAtsCandidatesInfiniteQueryKey = (options: Options<GetAtsCandidatesData>): QueryKey<Options<GetAtsCandidatesData>> => [createQueryKey('getAtsCandidates', options, true)]

export const getAtsCandidatesInfiniteOptions = (options: Options<GetAtsCandidatesData>) => {
	return infiniteQueryOptions<GetAtsCandidatesResponse, GetAtsCandidatesError, InfiniteData<GetAtsCandidatesResponse>, QueryKey<Options<GetAtsCandidatesData>>, GetAtsCandidatesParameterCursor | Pick<QueryKey<Options<GetAtsCandidatesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetAtsCandidatesData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getAtsCandidates({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getAtsCandidatesInfiniteQueryKey(options)
		}
	)
}

export const postAtsCandidatesQueryKey = (options: Options<PostAtsCandidatesData>) => [createQueryKey('postAtsCandidates', options)]

export const postAtsCandidatesOptions = (options: Options<PostAtsCandidatesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postAtsCandidates({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postAtsCandidatesQueryKey(options)
	})
}

export const postAtsCandidatesMutation = (options?: Partial<Options<PostAtsCandidatesData>>) => {
	const mutationOptions: UseMutationOptions<PostAtsCandidatesResponse, PostAtsCandidatesError, Options<PostAtsCandidatesData>> = {
		mutationFn: async localOptions => {
			const { data } = await postAtsCandidates({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const patchAtsCandidatesCandidateIdMutation = (options?: Partial<Options<PatchAtsCandidatesCandidateIdData>>) => {
	const mutationOptions: UseMutationOptions<PatchAtsCandidatesCandidateIdResponse, PatchAtsCandidatesCandidateIdError, Options<PatchAtsCandidatesCandidateIdData>> = {
		mutationFn: async localOptions => {
			const { data } = await patchAtsCandidatesCandidateId({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getAtsCandidatesCandidateIdAttachmentsQueryKey = (options: Options<GetAtsCandidatesCandidateIdAttachmentsData>) => [createQueryKey('getAtsCandidatesCandidateIdAttachments', options)]

export const getAtsCandidatesCandidateIdAttachmentsOptions = (options: Options<GetAtsCandidatesCandidateIdAttachmentsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAtsCandidatesCandidateIdAttachments({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAtsCandidatesCandidateIdAttachmentsQueryKey(options)
	})
}

export const postAtsCandidatesCandidateIdAttachmentsQueryKey = (options: Options<PostAtsCandidatesCandidateIdAttachmentsData>) => [createQueryKey('postAtsCandidatesCandidateIdAttachments', options)]

export const postAtsCandidatesCandidateIdAttachmentsOptions = (options: Options<PostAtsCandidatesCandidateIdAttachmentsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postAtsCandidatesCandidateIdAttachments({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postAtsCandidatesCandidateIdAttachmentsQueryKey(options)
	})
}

export const postAtsCandidatesCandidateIdAttachmentsMutation = (options?: Partial<Options<PostAtsCandidatesCandidateIdAttachmentsData>>) => {
	const mutationOptions: UseMutationOptions<PostAtsCandidatesCandidateIdAttachmentsResponse, PostAtsCandidatesCandidateIdAttachmentsError, Options<PostAtsCandidatesCandidateIdAttachmentsData>> = {
		mutationFn: async localOptions => {
			const { data } = await postAtsCandidatesCandidateIdAttachments({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postAtsCandidatesCandidateIdResultLinksQueryKey = (options: Options<PostAtsCandidatesCandidateIdResultLinksData>) => [createQueryKey('postAtsCandidatesCandidateIdResultLinks', options)]

export const postAtsCandidatesCandidateIdResultLinksOptions = (options: Options<PostAtsCandidatesCandidateIdResultLinksData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postAtsCandidatesCandidateIdResultLinks({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postAtsCandidatesCandidateIdResultLinksQueryKey(options)
	})
}

export const postAtsCandidatesCandidateIdResultLinksMutation = (options?: Partial<Options<PostAtsCandidatesCandidateIdResultLinksData>>) => {
	const mutationOptions: UseMutationOptions<PostAtsCandidatesCandidateIdResultLinksResponse, PostAtsCandidatesCandidateIdResultLinksError, Options<PostAtsCandidatesCandidateIdResultLinksData>> = {
		mutationFn: async localOptions => {
			const { data } = await postAtsCandidatesCandidateIdResultLinks({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const deleteAtsCandidatesCandidateIdTagsMutation = (options?: Partial<Options<DeleteAtsCandidatesCandidateIdTagsData>>) => {
	const mutationOptions: UseMutationOptions<DeleteAtsCandidatesCandidateIdTagsResponse, DeleteAtsCandidatesCandidateIdTagsError, Options<DeleteAtsCandidatesCandidateIdTagsData>> = {
		mutationFn: async localOptions => {
			const { data } = await deleteAtsCandidatesCandidateIdTags({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postAtsCandidatesCandidateIdTagsQueryKey = (options: Options<PostAtsCandidatesCandidateIdTagsData>) => [createQueryKey('postAtsCandidatesCandidateIdTags', options)]

export const postAtsCandidatesCandidateIdTagsOptions = (options: Options<PostAtsCandidatesCandidateIdTagsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postAtsCandidatesCandidateIdTags({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postAtsCandidatesCandidateIdTagsQueryKey(options)
	})
}

export const postAtsCandidatesCandidateIdTagsMutation = (options?: Partial<Options<PostAtsCandidatesCandidateIdTagsData>>) => {
	const mutationOptions: UseMutationOptions<PostAtsCandidatesCandidateIdTagsResponse, PostAtsCandidatesCandidateIdTagsError, Options<PostAtsCandidatesCandidateIdTagsData>> = {
		mutationFn: async localOptions => {
			const { data } = await postAtsCandidatesCandidateIdTags({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const patchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldIdMutation = (options?: Partial<Options<PatchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldIdData>>) => {
	const mutationOptions: UseMutationOptions<PatchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldIdResponse, PatchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldIdError, Options<PatchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldIdData>> = {
		mutationFn: async localOptions => {
			const { data } = await patchAtsCandidatesCandidateIdIntegrationFieldsIntegrationFieldId({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getAtsTagsQueryKey = (options: Options<GetAtsTagsData>) => [createQueryKey('getAtsTags', options)]

export const getAtsTagsOptions = (options: Options<GetAtsTagsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAtsTags({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAtsTagsQueryKey(options)
	})
}

export const getAtsTagsInfiniteQueryKey = (options: Options<GetAtsTagsData>): QueryKey<Options<GetAtsTagsData>> => [createQueryKey('getAtsTags', options, true)]

export const getAtsTagsInfiniteOptions = (options: Options<GetAtsTagsData>) => {
	return infiniteQueryOptions<GetAtsTagsResponse, GetAtsTagsError, InfiniteData<GetAtsTagsResponse>, QueryKey<Options<GetAtsTagsData>>, GetAtsTagsParameterCursor | Pick<QueryKey<Options<GetAtsTagsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetAtsTagsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getAtsTags({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getAtsTagsInfiniteQueryKey(options)
		}
	)
}

export const getAtsApplicationStagesQueryKey = (options: Options<GetAtsApplicationStagesData>) => [createQueryKey('getAtsApplicationStages', options)]

export const getAtsApplicationStagesOptions = (options: Options<GetAtsApplicationStagesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAtsApplicationStages({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAtsApplicationStagesQueryKey(options)
	})
}

export const getAtsApplicationStagesInfiniteQueryKey = (options: Options<GetAtsApplicationStagesData>): QueryKey<Options<GetAtsApplicationStagesData>> => [createQueryKey('getAtsApplicationStages', options, true)]

export const getAtsApplicationStagesInfiniteOptions = (options: Options<GetAtsApplicationStagesData>) => {
	return infiniteQueryOptions<GetAtsApplicationStagesResponse, GetAtsApplicationStagesError, InfiniteData<GetAtsApplicationStagesResponse>, QueryKey<Options<GetAtsApplicationStagesData>>, GetAtsApplicationStagesParameterCursor | Pick<QueryKey<Options<GetAtsApplicationStagesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetAtsApplicationStagesData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getAtsApplicationStages({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getAtsApplicationStagesInfiniteQueryKey(options)
		}
	)
}

export const getAtsJobsQueryKey = (options: Options<GetAtsJobsData>) => [createQueryKey('getAtsJobs', options)]

export const getAtsJobsOptions = (options: Options<GetAtsJobsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAtsJobs({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAtsJobsQueryKey(options)
	})
}

export const getAtsJobsInfiniteQueryKey = (options: Options<GetAtsJobsData>): QueryKey<Options<GetAtsJobsData>> => [createQueryKey('getAtsJobs', options, true)]

export const getAtsJobsInfiniteOptions = (options: Options<GetAtsJobsData>) => {
	return infiniteQueryOptions<GetAtsJobsResponse, GetAtsJobsError, InfiniteData<GetAtsJobsResponse>, QueryKey<Options<GetAtsJobsData>>, GetAtsJobsParameterCursor | Pick<QueryKey<Options<GetAtsJobsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetAtsJobsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getAtsJobs({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getAtsJobsInfiniteQueryKey(options)
		}
	)
}

export const postAtsJobsJobIdApplicationsQueryKey = (options: Options<PostAtsJobsJobIdApplicationsData>) => [createQueryKey('postAtsJobsJobIdApplications', options)]

export const postAtsJobsJobIdApplicationsOptions = (options: Options<PostAtsJobsJobIdApplicationsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postAtsJobsJobIdApplications({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postAtsJobsJobIdApplicationsQueryKey(options)
	})
}

export const postAtsJobsJobIdApplicationsMutation = (options?: Partial<Options<PostAtsJobsJobIdApplicationsData>>) => {
	const mutationOptions: UseMutationOptions<PostAtsJobsJobIdApplicationsResponse, PostAtsJobsJobIdApplicationsError, Options<PostAtsJobsJobIdApplicationsData>> = {
		mutationFn: async localOptions => {
			const { data } = await postAtsJobsJobIdApplications({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getAtsUsersQueryKey = (options: Options<GetAtsUsersData>) => [createQueryKey('getAtsUsers', options)]

export const getAtsUsersOptions = (options: Options<GetAtsUsersData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAtsUsers({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAtsUsersQueryKey(options)
	})
}

export const getAtsUsersInfiniteQueryKey = (options: Options<GetAtsUsersData>): QueryKey<Options<GetAtsUsersData>> => [createQueryKey('getAtsUsers', options, true)]

export const getAtsUsersInfiniteOptions = (options: Options<GetAtsUsersData>) => {
	return infiniteQueryOptions<GetAtsUsersResponse, GetAtsUsersError, InfiniteData<GetAtsUsersResponse>, QueryKey<Options<GetAtsUsersData>>, GetAtsUsersParameterCursor | Pick<QueryKey<Options<GetAtsUsersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetAtsUsersData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getAtsUsers({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getAtsUsersInfiniteQueryKey(options)
		}
	)
}

export const getAtsOffersQueryKey = (options: Options<GetAtsOffersData>) => [createQueryKey('getAtsOffers', options)]

export const getAtsOffersOptions = (options: Options<GetAtsOffersData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAtsOffers({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAtsOffersQueryKey(options)
	})
}

export const getAtsOffersInfiniteQueryKey = (options: Options<GetAtsOffersData>): QueryKey<Options<GetAtsOffersData>> => [createQueryKey('getAtsOffers', options, true)]

export const getAtsOffersInfiniteOptions = (options: Options<GetAtsOffersData>) => {
	return infiniteQueryOptions<GetAtsOffersResponse, GetAtsOffersError, InfiniteData<GetAtsOffersResponse>, QueryKey<Options<GetAtsOffersData>>, GetAtsOffersParameterCursor | Pick<QueryKey<Options<GetAtsOffersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetAtsOffersData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getAtsOffers({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getAtsOffersInfiniteQueryKey(options)
		}
	)
}

export const getAtsRejectionReasonsQueryKey = (options: Options<GetAtsRejectionReasonsData>) => [createQueryKey('getAtsRejectionReasons', options)]

export const getAtsRejectionReasonsOptions = (options: Options<GetAtsRejectionReasonsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAtsRejectionReasons({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAtsRejectionReasonsQueryKey(options)
	})
}

export const getAtsRejectionReasonsInfiniteQueryKey = (options: Options<GetAtsRejectionReasonsData>): QueryKey<Options<GetAtsRejectionReasonsData>> => [createQueryKey('getAtsRejectionReasons', options, true)]

export const getAtsRejectionReasonsInfiniteOptions = (options: Options<GetAtsRejectionReasonsData>) => {
	return infiniteQueryOptions<GetAtsRejectionReasonsResponse, GetAtsRejectionReasonsError, InfiniteData<GetAtsRejectionReasonsResponse>, QueryKey<Options<GetAtsRejectionReasonsData>>, GetAtsRejectionReasonsParameterCursor | Pick<QueryKey<Options<GetAtsRejectionReasonsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetAtsRejectionReasonsData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getAtsRejectionReasons({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getAtsRejectionReasonsInfiniteQueryKey(options)
		}
	)
}

export const getAssessmentPackagesQueryKey = (options: Options<GetAssessmentPackagesData>) => [createQueryKey('getAssessmentPackages', options)]

export const getAssessmentPackagesOptions = (options: Options<GetAssessmentPackagesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAssessmentPackages({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAssessmentPackagesQueryKey(options)
	})
}

export const putAssessmentPackagesMutation = (options?: Partial<Options<PutAssessmentPackagesData>>) => {
	const mutationOptions: UseMutationOptions<PutAssessmentPackagesResponse, PutAssessmentPackagesError, Options<PutAssessmentPackagesData>> = {
		mutationFn: async localOptions => {
			const { data } = await putAssessmentPackages({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getAssessmentOrdersOpenQueryKey = (options: Options<GetAssessmentOrdersOpenData>) => [createQueryKey('getAssessmentOrdersOpen', options)]

export const getAssessmentOrdersOpenOptions = (options: Options<GetAssessmentOrdersOpenData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getAssessmentOrdersOpen({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getAssessmentOrdersOpenQueryKey(options)
	})
}

export const getAssessmentOrdersOpenInfiniteQueryKey = (options: Options<GetAssessmentOrdersOpenData>): QueryKey<Options<GetAssessmentOrdersOpenData>> => [createQueryKey('getAssessmentOrdersOpen', options, true)]

export const getAssessmentOrdersOpenInfiniteOptions = (options: Options<GetAssessmentOrdersOpenData>) => {
	return infiniteQueryOptions<GetAssessmentOrdersOpenResponse, GetAssessmentOrdersOpenError, InfiniteData<GetAssessmentOrdersOpenResponse>, QueryKey<Options<GetAssessmentOrdersOpenData>>, GetAssessmentOrdersOpenParameterCursor | Pick<QueryKey<Options<GetAssessmentOrdersOpenData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
		// @ts-ignore
		{
			queryFn: async ({ pageParam, queryKey, signal }) => {
				// @ts-ignore
				const page: Pick<QueryKey<Options<GetAssessmentOrdersOpenData>>[0], 'body' | 'headers' | 'path' | 'query'> =
					typeof pageParam === 'object'
						? pageParam
						: {
								query: {
									cursor: pageParam
								}
							}
				const params = createInfiniteParams(queryKey, page)
				const { data } = await getAssessmentOrdersOpen({
					...options,
					...params,
					signal,
					throwOnError: true
				})
				return data
			},
			queryKey: getAssessmentOrdersOpenInfiniteQueryKey(options)
		}
	)
}

export const putAssessmentOrdersAssessmentOrderIdResultMutation = (options?: Partial<Options<PutAssessmentOrdersAssessmentOrderIdResultData>>) => {
	const mutationOptions: UseMutationOptions<PutAssessmentOrdersAssessmentOrderIdResultResponse, PutAssessmentOrdersAssessmentOrderIdResultError, Options<PutAssessmentOrdersAssessmentOrderIdResultData>> = {
		mutationFn: async localOptions => {
			const { data } = await putAssessmentOrdersAssessmentOrderIdResult({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postConnectCreateLinkQueryKey = (options?: Options<PostConnectCreateLinkData>) => [createQueryKey('postConnectCreateLink', options)]

export const postConnectCreateLinkOptions = (options?: Options<PostConnectCreateLinkData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postConnectCreateLink({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postConnectCreateLinkQueryKey(options)
	})
}

export const postConnectCreateLinkMutation = (options?: Partial<Options<PostConnectCreateLinkData>>) => {
	const mutationOptions: UseMutationOptions<PostConnectCreateLinkResponse, PostConnectCreateLinkError, Options<PostConnectCreateLinkData>> = {
		mutationFn: async localOptions => {
			const { data } = await postConnectCreateLink({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getConnectIntegrationByTokenTokenQueryKey = (options: Options<GetConnectIntegrationByTokenTokenData>) => [createQueryKey('getConnectIntegrationByTokenToken', options)]

export const getConnectIntegrationByTokenTokenOptions = (options: Options<GetConnectIntegrationByTokenTokenData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getConnectIntegrationByTokenToken({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getConnectIntegrationByTokenTokenQueryKey(options)
	})
}

export const postConnectActivateIntegrationQueryKey = (options?: Options<PostConnectActivateIntegrationData>) => [createQueryKey('postConnectActivateIntegration', options)]

export const postConnectActivateIntegrationOptions = (options?: Options<PostConnectActivateIntegrationData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postConnectActivateIntegration({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postConnectActivateIntegrationQueryKey(options)
	})
}

export const postConnectActivateIntegrationMutation = (options?: Partial<Options<PostConnectActivateIntegrationData>>) => {
	const mutationOptions: UseMutationOptions<PostConnectActivateIntegrationResponse, PostConnectActivateIntegrationError, Options<PostConnectActivateIntegrationData>> = {
		mutationFn: async localOptions => {
			const { data } = await postConnectActivateIntegration({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getCustomDatevSystemInformationQueryKey = (options: Options<GetCustomDatevSystemInformationData>) => [createQueryKey('getCustomDatevSystemInformation', options)]

export const getCustomDatevSystemInformationOptions = (options: Options<GetCustomDatevSystemInformationData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCustomDatevSystemInformation({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getCustomDatevSystemInformationQueryKey(options)
	})
}

export const postCustomDatevPassthroughQueryKey = (options: Options<PostCustomDatevPassthroughData>) => [createQueryKey('postCustomDatevPassthrough', options)]

export const postCustomDatevPassthroughOptions = (options: Options<PostCustomDatevPassthroughData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postCustomDatevPassthrough({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postCustomDatevPassthroughQueryKey(options)
	})
}

export const postCustomDatevPassthroughMutation = (options?: Partial<Options<PostCustomDatevPassthroughData>>) => {
	const mutationOptions: UseMutationOptions<PostCustomDatevPassthroughResponse, PostCustomDatevPassthroughError, Options<PostCustomDatevPassthroughData>> = {
		mutationFn: async localOptions => {
			const { data } = await postCustomDatevPassthrough({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getCustomDatevCheckEauPermissionQueryKey = (options: Options<GetCustomDatevCheckEauPermissionData>) => [createQueryKey('getCustomDatevCheckEauPermission', options)]

export const getCustomDatevCheckEauPermissionOptions = (options: Options<GetCustomDatevCheckEauPermissionData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCustomDatevCheckEauPermission({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getCustomDatevCheckEauPermissionQueryKey(options)
	})
}

export const getCustomDatevEauRequestsEauIdQueryKey = (options: Options<GetCustomDatevEauRequestsEauIdData>) => [createQueryKey('getCustomDatevEauRequestsEauId', options)]

export const getCustomDatevEauRequestsEauIdOptions = (options: Options<GetCustomDatevEauRequestsEauIdData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCustomDatevEauRequestsEauId({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getCustomDatevEauRequestsEauIdQueryKey(options)
	})
}

export const getCustomDatevCheckDocumentPermissionQueryKey = (options: Options<GetCustomDatevCheckDocumentPermissionData>) => [createQueryKey('getCustomDatevCheckDocumentPermission', options)]

export const getCustomDatevCheckDocumentPermissionOptions = (options: Options<GetCustomDatevCheckDocumentPermissionData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCustomDatevCheckDocumentPermission({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getCustomDatevCheckDocumentPermissionQueryKey(options)
	})
}

export const getCustomDatevAvailableDocumentsQueryKey = (options: Options<GetCustomDatevAvailableDocumentsData>) => [createQueryKey('getCustomDatevAvailableDocuments', options)]

export const getCustomDatevAvailableDocumentsOptions = (options: Options<GetCustomDatevAvailableDocumentsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCustomDatevAvailableDocuments({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getCustomDatevAvailableDocumentsQueryKey(options)
	})
}

export const postCustomDatevDownloadDocumentQueryKey = (options: Options<PostCustomDatevDownloadDocumentData>) => [createQueryKey('postCustomDatevDownloadDocument', options)]

export const postCustomDatevDownloadDocumentOptions = (options: Options<PostCustomDatevDownloadDocumentData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postCustomDatevDownloadDocument({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postCustomDatevDownloadDocumentQueryKey(options)
	})
}

export const postCustomDatevDownloadDocumentMutation = (options?: Partial<Options<PostCustomDatevDownloadDocumentData>>) => {
	const mutationOptions: UseMutationOptions<PostCustomDatevDownloadDocumentResponse, PostCustomDatevDownloadDocumentError, Options<PostCustomDatevDownloadDocumentData>> = {
		mutationFn: async localOptions => {
			const { data } = await postCustomDatevDownloadDocument({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postCustomDatevEmployeesEmployeeIdDownloadDocumentQueryKey = (options: Options<PostCustomDatevEmployeesEmployeeIdDownloadDocumentData>) => [createQueryKey('postCustomDatevEmployeesEmployeeIdDownloadDocument', options)]

export const postCustomDatevEmployeesEmployeeIdDownloadDocumentOptions = (options: Options<PostCustomDatevEmployeesEmployeeIdDownloadDocumentData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postCustomDatevEmployeesEmployeeIdDownloadDocument({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postCustomDatevEmployeesEmployeeIdDownloadDocumentQueryKey(options)
	})
}

export const postCustomDatevEmployeesEmployeeIdDownloadDocumentMutation = (options?: Partial<Options<PostCustomDatevEmployeesEmployeeIdDownloadDocumentData>>) => {
	const mutationOptions: UseMutationOptions<PostCustomDatevEmployeesEmployeeIdDownloadDocumentResponse, PostCustomDatevEmployeesEmployeeIdDownloadDocumentError, Options<PostCustomDatevEmployeesEmployeeIdDownloadDocumentData>> = {
		mutationFn: async localOptions => {
			const { data } = await postCustomDatevEmployeesEmployeeIdDownloadDocument({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postCustomDatevEmployeesEmployeeIdEauRequestsQueryKey = (options: Options<PostCustomDatevEmployeesEmployeeIdEauRequestsData>) => [createQueryKey('postCustomDatevEmployeesEmployeeIdEauRequests', options)]

export const postCustomDatevEmployeesEmployeeIdEauRequestsOptions = (options: Options<PostCustomDatevEmployeesEmployeeIdEauRequestsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postCustomDatevEmployeesEmployeeIdEauRequests({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postCustomDatevEmployeesEmployeeIdEauRequestsQueryKey(options)
	})
}

export const postCustomDatevEmployeesEmployeeIdEauRequestsMutation = (options?: Partial<Options<PostCustomDatevEmployeesEmployeeIdEauRequestsData>>) => {
	const mutationOptions: UseMutationOptions<PostCustomDatevEmployeesEmployeeIdEauRequestsResponse, PostCustomDatevEmployeesEmployeeIdEauRequestsError, Options<PostCustomDatevEmployeesEmployeeIdEauRequestsData>> = {
		mutationFn: async localOptions => {
			const { data } = await postCustomDatevEmployeesEmployeeIdEauRequests({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const putCustomDatevEmployeesEmployeeIdPreparePayrollMutation = (options?: Partial<Options<PutCustomDatevEmployeesEmployeeIdPreparePayrollData>>) => {
	const mutationOptions: UseMutationOptions<PutCustomDatevEmployeesEmployeeIdPreparePayrollResponse, PutCustomDatevEmployeesEmployeeIdPreparePayrollError, Options<PutCustomDatevEmployeesEmployeeIdPreparePayrollData>> = {
		mutationFn: async localOptions => {
			const { data } = await putCustomDatevEmployeesEmployeeIdPreparePayroll({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const putCustomDatevEmployeesEmployeeIdCompensationsMutation = (options?: Partial<Options<PutCustomDatevEmployeesEmployeeIdCompensationsData>>) => {
	const mutationOptions: UseMutationOptions<PutCustomDatevEmployeesEmployeeIdCompensationsResponse, PutCustomDatevEmployeesEmployeeIdCompensationsError, Options<PutCustomDatevEmployeesEmployeeIdCompensationsData>> = {
		mutationFn: async localOptions => {
			const { data } = await putCustomDatevEmployeesEmployeeIdCompensations({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const getCustomDatevCheckWritePermissionQueryKey = (options: Options<GetCustomDatevCheckWritePermissionData>) => [createQueryKey('getCustomDatevCheckWritePermission', options)]

export const getCustomDatevCheckWritePermissionOptions = (options: Options<GetCustomDatevCheckWritePermissionData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCustomDatevCheckWritePermission({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getCustomDatevCheckWritePermissionQueryKey(options)
	})
}

export const getCustomDatevDataPushesQueryKey = (options: Options<GetCustomDatevDataPushesData>) => [createQueryKey('getCustomDatevDataPushes', options)]

export const getCustomDatevDataPushesOptions = (options: Options<GetCustomDatevDataPushesData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await getCustomDatevDataPushes({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: getCustomDatevDataPushesQueryKey(options)
	})
}

export const postCustomDatevPushDataGeneralQueryKey = (options: Options<PostCustomDatevPushDataGeneralData>) => [createQueryKey('postCustomDatevPushDataGeneral', options)]

export const postCustomDatevPushDataGeneralOptions = (options: Options<PostCustomDatevPushDataGeneralData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postCustomDatevPushDataGeneral({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postCustomDatevPushDataGeneralQueryKey(options)
	})
}

export const postCustomDatevPushDataGeneralMutation = (options?: Partial<Options<PostCustomDatevPushDataGeneralData>>) => {
	const mutationOptions: UseMutationOptions<PostCustomDatevPushDataGeneralResponse, PostCustomDatevPushDataGeneralError, Options<PostCustomDatevPushDataGeneralData>> = {
		mutationFn: async localOptions => {
			const { data } = await postCustomDatevPushDataGeneral({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postCustomDatevPushDataPayrollQueryKey = (options: Options<PostCustomDatevPushDataPayrollData>) => [createQueryKey('postCustomDatevPushDataPayroll', options)]

export const postCustomDatevPushDataPayrollOptions = (options: Options<PostCustomDatevPushDataPayrollData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postCustomDatevPushDataPayroll({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postCustomDatevPushDataPayrollQueryKey(options)
	})
}

export const postCustomDatevPushDataPayrollMutation = (options?: Partial<Options<PostCustomDatevPushDataPayrollData>>) => {
	const mutationOptions: UseMutationOptions<PostCustomDatevPushDataPayrollResponse, PostCustomDatevPushDataPayrollError, Options<PostCustomDatevPushDataPayrollData>> = {
		mutationFn: async localOptions => {
			const { data } = await postCustomDatevPushDataPayroll({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}

export const postCustomSilaeEmployeesEmployeeIdPayrollSupplementsQueryKey = (options: Options<PostCustomSilaeEmployeesEmployeeIdPayrollSupplementsData>) => [createQueryKey('postCustomSilaeEmployeesEmployeeIdPayrollSupplements', options)]

export const postCustomSilaeEmployeesEmployeeIdPayrollSupplementsOptions = (options: Options<PostCustomSilaeEmployeesEmployeeIdPayrollSupplementsData>) => {
	return queryOptions({
		queryFn: async ({ queryKey, signal }) => {
			const { data } = await postCustomSilaeEmployeesEmployeeIdPayrollSupplements({
				...options,
				...queryKey[0],
				signal,
				throwOnError: true
			})
			return data
		},
		queryKey: postCustomSilaeEmployeesEmployeeIdPayrollSupplementsQueryKey(options)
	})
}

export const postCustomSilaeEmployeesEmployeeIdPayrollSupplementsMutation = (options?: Partial<Options<PostCustomSilaeEmployeesEmployeeIdPayrollSupplementsData>>) => {
	const mutationOptions: UseMutationOptions<PostCustomSilaeEmployeesEmployeeIdPayrollSupplementsResponse, PostCustomSilaeEmployeesEmployeeIdPayrollSupplementsError, Options<PostCustomSilaeEmployeesEmployeeIdPayrollSupplementsData>> = {
		mutationFn: async localOptions => {
			const { data } = await postCustomSilaeEmployeesEmployeeIdPayrollSupplements({
				...options,
				...localOptions,
				throwOnError: true
			})
			return data
		}
	}
	return mutationOptions
}
